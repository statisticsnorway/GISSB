[{"path":"/articles/GISSB_vignette.html","id":"finne-koordinater-til-adresser-address_to_coords","dir":"Articles","previous_headings":"","what":"Finne koordinater til adresser (address_to_coords)","title":"GISSB - Netverksanalyse i R","text":"Funksjonen address_to_coords bruker Kartverkets adresse-API å finne koordinater til adresser. Denne API-en krever nettilgang og baserer seg på matrikkelen, som er Norges offisielle eiendomsregister og inneholder alle offisielle adresser med tilhørende koordinater. Ved å skrive inn postnummer og adresse returneres et sf-objekt med koordinatene til denne adressen. Dersom det er én eller flere adresser som ikke finnes matrikkelen returneres det et datasett med manglenede verdier lon/lat adressene som mangler. Standardverdi projeksjonen av koordinatene er satt til CRS 25833. Dette er det offisielle koordinatsystemet Norge og brukes de fleste norske kartfiler. Det er også mulig å benytte CRS 4326 å plassere koordinatene på kart med åpen kildekode (som f.eks. Leaflet) eller å enklere søke opp koordinater Google Maps. Koordinatsystemet CRS 4326 er derimot ikke metrisk og man kan derfor ikke måle avstander meter når man bruker dette. Derfor anbefales det kun å bruke CRS 4326 forbindelse med visualisering. å få koordinatene med CRS 4326 må dette spesifiseres funksjonen address_to_coords. Det er også mulig å angi en vektor med flere postnummere og adresser å få oppgitt koordinatene til flere adresser: Etter å ha omgjort koordinatene til CRS 4326 kan de plasseres på internasjonale kart, med pakken Leaflet:","code":"fra <- GISSB::address_to_coords(zip_code = \"0177\",                          address = \"Akersveien 26\")  fra #> Simple feature collection with 1 feature and 5 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 262320 ymin: 6650367 xmax: 262320 ymax: 6650367 #> Projected CRS: ETRS89 / UTM zone 33N #>            address zip_code kommunenummer kommunenavn ID               geometry #> 0177 Akersveien 26     0177          0301        OSLO  1 POINT (262320 6650367)  til <- GISSB::address_to_coords(zip_code = \"2211\",                          address = \"Otervegen 23\")  til #> Simple feature collection with 1 feature and 5 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 334492 ymin: 6674510 xmax: 334492 ymax: 6674510 #> Projected CRS: ETRS89 / UTM zone 33N #>           address zip_code kommunenummer kommunenavn ID               geometry #> 2211 Otervegen 23     2211          3401 KONGSVINGER  1 POINT (334492 6674510) postnummere = c(\"0177\", \"2211\") adresser = c(\"Akersveien 26\", \"Otervegen 23\")  fra_4326 <- GISSB::address_to_coords(zip_code = postnummere,                          address = adresser,                          crs_out = 4326) fra_4326 #> Simple feature collection with 2 features and 5 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 10.74685 ymin: 59.92203 xmax: 12.01638 ymax: 60.17383 #> Geodetic CRS:  WGS 84 #>            address zip_code kommunenummer kommunenavn ID #> 0177 Akersveien 26     0177          0301        OSLO  1 #> 2211  Otervegen 23     2211          3401 KONGSVINGER  2 #>                       geometry #> 0177 POINT (10.74685 59.92203) #> 2211 POINT (12.01638 60.17383) leaflet::leaflet(width = \"100%\") %>%   leaflet::addTiles() %>%   leaflet::addMarkers(data = fra_4326$geometry)"},{"path":"/articles/GISSB_vignette.html","id":"søke-opp-koordinater-i-google-maps-coords_to_google","dir":"Articles","previous_headings":"","what":"Søke opp koordinater i Google Maps (coords_to_google)","title":"GISSB - Netverksanalyse i R","text":"Når man skal kombinere flere kartfiler er det viktig alle filene er angitt med samme koordinatsystem. Om man derfor ønsker å beholde sf-objektet med CRS 25833, men ønsker å legge til en kolonne med koordinatene CRS 4326 (som er enklere å klippe og lime inn Google Maps) kan man bruke funksjonen coords_to_google. Da legges det til en kolonne som heter coords_google.","code":"fra <- GISSB::coords_to_google(fra) fra$coords_google #> [1] \"59.9220274187717, 10.7468516818247\"  til <- GISSB::coords_to_google(til) til$coords_google #> [1] \"60.1738313973094, 12.0163762410388\""},{"path":"/articles/GISSB_vignette.html","id":"databehandling-av-vegnettet-vegnett_to_r","dir":"Articles","previous_headings":"","what":"Databehandling av vegnettet (vegnett_to_R)","title":"GISSB - Netverksanalyse i R","text":"å beregne kjøretid og -avstand mellom ulike koordinater benyttes vegnettet som kan lastes ned fra Geonorge. Når man laster inn vegnettsfilen som et sf-objekt ser den slik ut (OBS: det kan ta opptil 3 minutter å laste inn filen):  Vegnettet består av punkter som er plassert ca. 50 meter fra hverandre. Disse punktene kalles noder. Lenkene som forbinder nodene/punktene sammen heter edges. vegnettet skal kunne brukes til nettverksanalyser R må dataene behandles og formatet omgjøres (med funksjoner bl.. fra pakkene igraph og cppRouting). Denne databehandlingen av vegnettet er samlet funksjonen vegnett_to_R. Resultatet er en liste med følgende objekter: [1] graph (tbl_graph) [2] nodes (sf) [3] edges (data.frame) [4] graph_cppRouting_minutes (cppRouting) [5] graph_cppRouting_meters (cppRouting) Objektene nodes og edges benyttes å plassere koordinatene til sitt nærmeste punkt vegnettet med funksjonen coords_to_node. Objektet graph benyttes å beregne korteste kjøretid/-vei meter eller minutter med funksjonen shortest_path_igraph. Denne benyttes også å vise hvilke noder hvilken rekkefølge som utgjør den korteste kjøreruten mellom punkter vegnettet. Objektet graph_cppRouting_minutes benyttes å beregne korteste kjøretid minutter med funksjonen shortest_path_cppRouting. Tilsvarende benyttes objektet graph_cppRouting_meters å beregne korteste kjøreavstand meter. Merk vegnettsfilene fra Geonorge endret struktur og kolonnenavn 2022. Standardverdiene funksjonen vegnett_to_R er gyldige den nye strukturen, mens vegnett fra 2021 og tidligere må følgende argumenter spesifiseres: year = 2021, fromnodeID = \"FROMNODEID\", tonodeID = \"TONODEID\", FT_minutes = \"FT_MINUTES\", TF_minutes = \"TF_MINUTES\" og meters = \"SHAPE_LENGTH\". Det er også mulig å legge til svingrestriksjoner (“turn restrictions”) vegnettet. Dette finnes som et separat kartlag .gdb-filene man laster ned fra Geonorge. Disse filene inneholder flere feil (?) og derfor anbefales det ikke å ta disse bruk (før problemene har blitt løst). Om man allikevel ønsker å teste med svingrestriksjoner må man laste inn kartlaget et objekt som heter turnrestrictions_geom og sette argumentet turn_restrictions = TRUE funksjonen vegnett_to_R.","code":"vegnett <- sf::read_sf(\"vegnettRuteplan_FGDB_20210528.gdb\", 'ERFKPS')  ggplot2::ggplot() +   ggplot2::geom_sf(data = vegnett) vegnett_list <- vegnett_to_R(vegnett = vegnett_sampledata,                             year = 2021,                             fromnodeID = \"FROMNODEID\",                             tonodeID = \"TONODEID\",                             FT_minutes = \"FT_MINUTES\",                             TF_minutes = \"TF_MINUTES\",                             meters = \"SHAPE_LENGTH\")  graph <- vegnett_list[[1]] nodes <- vegnett_list[[2]] edges <- vegnett_list[[3]] graph_cppRouting_minutes <- vegnett_list[[4]] graph_cppRouting_meters <- vegnett_list[[5]]"},{"path":"/articles/GISSB_vignette.html","id":"knytte-koordinater-til-vegnettet-coords_to_node","dir":"Articles","previous_headings":"","what":"Knytte koordinater til vegnettet (coords_to_node)","title":"GISSB - Netverksanalyse i R","text":"å kunne beregne kjøretid/-vei fra et valgt start- og stoppunkt (uten å vite hvilken node-ID disse har) må man knytte adressene man ønsker å analysere til deres nærmeste punkt vegnettet. Dette gjøres ved å finne hvilken node som er den nærmeste et gitt koordinatpunkt (X og Y) vegnettet. Ved å bruke funksjonen knn fra pakken nabor finner man det nærmeste punktet meter (målt luftlinje) fra et gitt koordinatpunkt. knn = 1 betyr man kun er interessert å lokalisere det nærmeste punktet til koordinatene og dette er satt som standardverdi funksjonen coords_to_node. Dersom denne settes til et annet tall (gjøres ved å endre argumentet knn = X funksjonen) finner man det nærmeste punktet (knn = 1), nærmeste punktene (knn = 2), tre nærmeste punktene (knn = 3) osv. Dette kan være nyttig dersom det nærmeste punktet vegnettet ikke finner en gyldig rute pga. enveiskjørte veier eller andre brudd vegnettet. funksjonen coords_to_node legger man inn et sf-objekt (med CRS 25833) som inneholder koordinatene til ett eller flere punkter. Resultatet er et objekt der node-ID-en til den nærmeste noden til koordinatene målt luftlinje har blitt lagt til (from_node/to_node). tillegg viser kolonnen dist_coord_node_from/dist_coord_node_to hvor mange meter det er luftlinje mellom koordinatene og det nærmeste punktet vegnettet til hvert koordinatpunkt. Dette kan være nyttig å avgjøre om det er enkelte koordinater som har blitt tildelt noder som er langt unna den opprinnelige plasseringen (og som man dermed kan vurdere å utelate fra den videre analysen). Det kan også være lurt å legge til en ekstra kostnad avstanden mellom koordinatene til en adresse og den nærmeste noden vegnettet. F.eks. kan man regne ut hvor lang tid det tar å kjøre avstanden 30 km/t minutter ved å gange avstanden dist_coord_node_from/dist_coord_node_to med 0,002. Man bør også gange selve avstanden først med et tall høyere enn 1 (f.eks. 1,5) å kompensere svinger veien ettersom det sjelden er mulig å reise luftlinje. å benytte funksjonen coords_to_node må objektene nodes og edges (som lages med funksjonen vegnett_to_R) være lastet inn. Vegnettet består av flere mindre deler/vegnett der flere av disse ikke har noen tilknytning til hverandre. Dersom man har et startpunkt som tilhører en annen del av vegnettet enn stoppunktet vil det ikke være mulig å finne en gyldig rute mellom disse. Ved å legge til argumentet membership = TRUE begrenses listen hvilke noder man leter etter til å kun gjelde noder som er tilknyttet samme del av vegnettet som enten start- eller stoppnoden. Dette kan bare gjøres enten “” eller “” og koden som har angitt argumentet membership = FALSE må kjøres før koden som har membership = TRUE:","code":"from_node <- GISSB::coords_to_node(coords = fra, direction = \"from\") from_node  to_node <- GISSB::coords_to_node(coords = til, direction = \"to\") to_node from_node <- GISSB::coords_to_node(coords = fra, direction = \"from\", membership = FALSE)  to_node <- GISSB::coords_to_node(coords = til, direction = \"to\", membership = TRUE)"},{"path":"/articles/GISSB_vignette.html","id":"beregne-korteste-kjøretid-og--avstand-med-tidygraph-shortest_path_igraph","dir":"Articles","previous_headings":"","what":"Beregne korteste kjøretid og -avstand med tidygraph (shortest_path_igraph)","title":"GISSB - Netverksanalyse i R","text":"Når man har en node-ID både et start- og stoppunkt kan man benytte funksjonen shortest_path_igraph å beregne den korteste kjøreavstanden mellom disse. å beregne korteste kjøretid minutter angis argumentet unit = \"minutes\" (standardverdi), mens unit = \"meters\" beregner korteste kjøreavstand meter. å kjøre koden må objektet graph (som lages med funksjonen vegnett_to_R) være lastet inn. OBS: shortest_path_igraph fungerer ikke med vektorer, dvs. en liste flere fra- eller til-noder. Med shortest_path_igraph er det altså kun mulig å beregne avstander én til én. å beregne avstand med flere fra- og/eller til-noder brukes funksjonen shortest_path_cppRouting (se nedenfor). å få oppgitt hvilke noder hvilken rekkefølge som utgjør den korteste ruten mellom start- og stoppunktet legges argumentet path = TRUE til: Det er mulig å visualisere kjøreruter laget med funksjonen shortest_path_igraph (der path = TRUE) ved å bruke funksjonen path_leaflet:","code":"avstand_min <- GISSB::shortest_path_igraph(from_node_ID = from_node$from_node,                            to_node_ID = to_node$to_node,                            unit = \"minutes\",                            path = F)  paste0(round(avstand_min$length, digits = 1), \" minutter / \",        substr(avstand_min$length/60, 1, 1),        \" timer og \",        round(avstand_min$length, digits = 0)-as.numeric(substr(avstand_min$length/60, 1, 1))*60, \" minutter\")  avstand_meter <- GISSB::shortest_path_igraph(from_node_ID = from_node$from_node,                                  to_node_ID = to_node$to_node,                                  unit = \"meters\",                                  path = F)  paste0(round(avstand_meter$length, digits = 1), \" meter / \",        round(avstand_meter$length/1000, digits = 1), \" km.\"        ) path <- GISSB::shortest_path_igraph(from_node_ID = from_node$from_node,                            to_node_ID = to_node$to_node,                            unit = \"minutes\",                            path = TRUE)  path$epath GISSB::path_leaflet(path)"},{"path":"/articles/GISSB_vignette.html","id":"beregne-korteste-kjøretid-og--avstand-med-cpprouting-shortest_path_cpprouting","dir":"Articles","previous_headings":"","what":"Beregne korteste kjøretid og -avstand med cppRouting (shortest_path_cppRouting)","title":"GISSB - Netverksanalyse i R","text":"Det er mulig å bruke funksjonen shortest_path_igraph til å beregne kjøretid/-vei, men dette kan ta veldig lang tid dersom man skal beregne kjøreruter mellom mange koordinater. Derfor er det best å heller bruke funksjonen shortest_path_cppRouting. Denne funksjonen bruker pakken cppRouting som benytter et annet format på dataene som krever mindre minne og benytter parallellprosessering, noe som gjør kjøringene går mye raskere. tillegg lagres ikke informasjonen om selve ruten, kun avstanden mellom start- og stoppunktene minutter eller meter. Dette er en fordel mtp. på tiden det tar å kjøre koden, men ulempen er man ikke får sjekket hvilke veglenker hver rute består av. Dette kan derfor funksjonen shortest_path_igraph (med path = TRUE) brukes til dersom man ønsker å kontrollere eller visualisere kjøreruter mellom ett start- og stoppunkt. funksjonen shortest_path_cppRouting kan man legge inn vektorer med flere noder både argumentene from_node og to_node. Det betyr dersom man legger inn noder from_node og fire noder to_node beregnes den korteste kjøreruten fra begge startnodene til alle de fire stoppnodene. Resultatet blir et objekt med åtte rader. Om man kun er interessert den korteste kjøreavstanden fra hver av startnodene til én av stoppnodene legger man inn argumentet dist = \"min\" funksjonen. Om man derimot vil ha hvilken av stoppnodene som har lengst kjøreavstand per startnode settes dist = \"max\". å beregne korteste kjøretid minutter med shortest_path_cppRouting settes graph_cppRouting = graph_cppRouting_minutes, mens graph_cppRouting = graph_cppRouting_meters beregner korteste kjøreavstand meter. Objektet/objektene graph_cppRouting_minutes/graph_cppRouting_meters må være lastet inn (gjøres med funksjonen vegnett_to_R) før funksjonen shortest_path_cppRouting kan brukes.","code":"avstand_cpp_min <- GISSB::shortest_path_cppRouting(from_node$from_node,                                        to_node$to_node,                                        unit = \"minutes\",                                         graph_cppRouting_object = graph_cppRouting_minutes)  avstand_cpp_min  avstand_cpp_meter <- GISSB::shortest_path_cppRouting(from_node$from_node,                                        to_node$to_node,                                        unit = \"meters\",                                         graph_cppRouting_object = graph_cppRouting_meters)  avstand_cpp_meter"},{"path":"/articles/GISSB_vignette.html","id":"eksempel-beregnet-kjøretid-til-nærmeste-fødested","dir":"Articles","previous_headings":"","what":"Eksempel: beregnet kjøretid til nærmeste fødested","title":"GISSB - Netverksanalyse i R","text":"dette eksempelet beregnes korteste og lengste kjøretid fra adresser (“Akersveien 26, 0177” og “Otervegen 23, 2211”) til syv ulike adresser (fødesteder).","code":"adresser <- c(\"Sykehusveien 25\",               \"Sognsvannsveien 20\",               \"Kirkeveien 166\",               \"Parkvegen 35\",               \"Kirkevegen 31\",               \"Sjukehusveien 9\",               \"Sogneprest Munthe-Kaas vei 100\")  postnummere <- c(\"1474\",               \"0372\",               \"0450\",               \"2212\",               \"2413\",               \"2500\",               \"1346\")  til <- GISSB::address_to_coords(zip_code = postnummere,                          address = adresser) %>%   GISSB::coords_to_google()  to_node <- GISSB::coords_to_node(coords = til, direction = \"to\", membership = F)  to_node  fra <- GISSB::address_to_coords(zip_code = c(\"0177\", \"2211\"),                          address = c(\"Akersveien 26\", \"Otervegen 23\")) %>%   GISSB::coords_to_google()  from_node <- GISSB::coords_to_node(coords = fra, direction = \"from\", membership = T)  from_node  avstand_cpp <- GISSB::shortest_path_cppRouting(unique(from_node$from_node),                                        unique(to_node$to_node),                                        unit = \"minutes\") avstand_cpp  avstand_cpp_min <- GISSB::shortest_path_cppRouting(unique(from_node$from_node),                                        unique(to_node$to_node),                                        unit = \"minutes\",                                        dist = \"min\") avstand_cpp_min  avstand_cpp_max <- GISSB::shortest_path_cppRouting(unique(from_node$from_node),                                        unique(to_node$to_node),                                        unit = \"minutes\",                                        dist = \"max\") avstand_cpp_max"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Sindre Mikael Haugen. Maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Haugen SM (2022). GISSB: Network Analysis Norwegian Road Network. R package version 1.1, https://statisticsnorway.github.io/GISSB/.","code":"@Manual{,   title = {GISSB: Network Analysis on the Norwegian Road Network},   author = {Sindre Mikael Haugen},   year = {2022},   note = {R package version 1.1},   url = {https://statisticsnorway.github.io/GISSB/}, }"},{"path":"/index.html","id":"gissb---network-analysis-in-r","dir":"","previous_headings":"","what":"Network Analysis on the Norwegian Road Network","title":"Network Analysis on the Norwegian Road Network","text":"GISSB package contains GIS functions R use Statistics Norway. See vignette introduction functions can used network analysis R: https://statisticsnorway.github.io/GISSB/articles/GISSB_vignette.html","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Network Analysis on the Norwegian Road Network","text":"can install development version GISSB like :","code":"devtools::install_github(\"statisticsnorway/GISSB\")"},{"path":"/index.html","id":"requirements","dir":"","previous_headings":"","what":"Requirements","title":"Network Analysis on the Norwegian Road Network","text":"functions GISSB package require Norwegian road network NVDB Ruteplan nettverksdatasett (National roads database - road network routing) downloaded locally computer. format file “FGDB 10.0”. file downloaded read R using sf package:","code":""},{"path":"/index.html","id":"id_2022-","dir":"","previous_headings":"Requirements","what":"2022-","title":"Network Analysis on the Norwegian Road Network","text":"","code":"vegnett <- sf::read_sf(\"vegnettRuteplan_FGDB_20221109.gdb\", layer = \"ruttger_link_geom\")  turnrestrictions_geom <- sf::read_sf(\"vegnettRuteplan_FGDB_20221109.gdb\", layer = \"turnrestrictions_geom\")"},{"path":"/index.html","id":"id_-2021","dir":"","previous_headings":"Requirements","what":"-2021","title":"Network Analysis on the Norwegian Road Network","text":"","code":"vegnett <- sf::read_sf(\"vegnettRuteplan_FGDB_20210528.gdb\", layer = 'ERFKPS')  turnrestrictions_geom <- sf::read_sf(\"vegnettRuteplan_FGDB_20210528.gdb\", layer = \"ERFKPS_turns\")"},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 GISSB authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/reference/address_to_coord.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert addresses to coordinates — address_to_coord","title":"Convert addresses to coordinates — address_to_coord","text":"Function find coordinates Norwegian Mapping Authority’s Cadastre (Norwegian: Matrikkelen, Norges eiendomsregister) address API.","code":""},{"path":"/reference/address_to_coord.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert addresses to coordinates — address_to_coord","text":"","code":"address_to_coord(zip_code, address, format = \"sf\", crs_out = 25833)"},{"path":"/reference/address_to_coord.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert addresses to coordinates — address_to_coord","text":"zip_code Character vector zip codes. address Character vector addresses (street name house number available) format Format returned data. Default value set “sf” (returns sf object). also possible set format “tibble” “data.frame”. crs_out Numeric vector chosen coordinate reference system (CRS). Default value set CRS 25833.","code":""},{"path":"/reference/address_to_coord.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert addresses to coordinates — address_to_coord","text":"Object coordinates specified addresses.","code":""},{"path":"/reference/address_to_coord.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert addresses to coordinates — address_to_coord","text":"","code":"if (FALSE) { from <- address_to_coord(zip_code = \"0177\",                         address = \"Akersveien 26\")                         }"},{"path":"/reference/address_to_coords.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert addresses to coordinates — address_to_coords","title":"Convert addresses to coordinates — address_to_coords","text":"function address_to_coords can used find coordinates supplied Norwegian addresses. Internet access required function utilizes Norwegian Mapping Authority’s address API.","code":""},{"path":"/reference/address_to_coords.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert addresses to coordinates — address_to_coords","text":"","code":"address_to_coords(zip_code, address, format = \"sf\", crs_out = 25833)"},{"path":"/reference/address_to_coords.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert addresses to coordinates — address_to_coords","text":"zip_code Character vector zip codes. address Character vector addresses (street name house number). format Format returned object. Default value set “sf” (returns sf object). also possible set format “tibble” “data.frame”. crs_out Numeric vector chosen coordinate reference system (CRS). Default value set CRS 25833.","code":""},{"path":"/reference/address_to_coords.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert addresses to coordinates — address_to_coords","text":"Object coordinates supplied addresses.","code":""},{"path":"/reference/address_to_coords.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert addresses to coordinates — address_to_coords","text":"coordinates found supplied address means exist Matrikkelen - Norway's official property register. See www.rettikartet.search existing addresses.","code":""},{"path":"/reference/address_to_coords.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert addresses to coordinates — address_to_coords","text":"","code":"address_to_coords(zip_code = \"0177\", address = \"Akersveien 26\") #> Simple feature collection with 1 feature and 5 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 262320 ymin: 6650367 xmax: 262320 ymax: 6650367 #> Projected CRS: ETRS89 / UTM zone 33N #>            address zip_code kommunenummer kommunenavn ID               geometry #> 0177 Akersveien 26     0177          0301        OSLO  1 POINT (262320 6650367)"},{"path":"/reference/adresse_api_koord.html","id":null,"dir":"Reference","previous_headings":"","what":"Adresser til koordinater — adresse_api_koord","title":"Adresser til koordinater — adresse_api_koord","text":"Funksjon å finne koordinater fra matrikkelen (adresse-API fra Kartverket).","code":""},{"path":"/reference/adresse_api_koord.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adresser til koordinater — adresse_api_koord","text":"","code":"adresse_api_koord(postnummer, adresse, format = \"sf\", crs = 25833)"},{"path":"/reference/adresse_api_koord.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adresser til koordinater — adresse_api_koord","text":"postnummer Karaktervektor med postnummer. adresse Karaktervektor med gateadresse (og gatenummer hvis tilgjengelig). format Format på datasettet som returneres. Default er satt til \"sf\" (sf-objekt), men det er også mulig å sette format = \"tibble\" eller \"data.frame\". crs Numerisk vektor med ønsket koordinatsystem koordinatene. Default er satt til CRS 25833.","code":""},{"path":"/reference/adresse_api_koord.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adresser til koordinater — adresse_api_koord","text":"Objekt med koordinatene til adressene.","code":""},{"path":"/reference/adresse_api_koord.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adresser til koordinater — adresse_api_koord","text":"","code":"fra <- adresse_api_koord(postnummer = \"0177\",                         adresse = \"Akersveien 26\")"},{"path":"/reference/beregne_avstand.html","id":null,"dir":"Reference","previous_headings":"","what":"Beregne korteste kjøreavstand (igraph) — beregne_avstand","title":"Beregne korteste kjøreavstand (igraph) — beregne_avstand","text":"Funksjon å beregne korteste kjøreavstand (minutter eller meter) mellom noder vegnettet. Funksjonen kan også returnere nodelenken (path) som den korteste kjøreruten består av. å bruke funksjonen må vegnettet ha blitt lastet inn og omgjort til et tbl_graph-objekt som heter \"graph\". Dette gjøres med funksjonen vegnett_to_R.","code":""},{"path":"/reference/beregne_avstand.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Beregne korteste kjøreavstand (igraph) — beregne_avstand","text":"","code":"beregne_avstand(from_node, to_node, enhet = \"FT_MINUTES\", path = F)"},{"path":"/reference/beregne_avstand.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Beregne korteste kjøreavstand (igraph) — beregne_avstand","text":"from_node Numerisk verdi med node-ID (en vektor med flere node-ID-er, se funksjonen beregne_avstand_cpp). to_node Numerisk verdi med node-ID (en vektor med flere node-ID-er, se funksjonen beregne_avstand_cpp). enhet Karaktervektor med \"FT_MINUTES\" å få korteste kjørerute målt minutter eller \"LENGTH\" korteste kjørerute målt meter. path Boolsk. Dersom path = TRUE returneres nodelenken som den korteste kjøreruten består av.","code":""},{"path":"/reference/beregne_avstand.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Beregne korteste kjøreavstand (igraph) — beregne_avstand","text":"Vektor med korteste kjørerute minutter eller meter. Dersom path = T returneres nodelenken som den korteste kjøreruten består av.","code":""},{"path":"/reference/beregne_avstand.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Beregne korteste kjøreavstand (igraph) — beregne_avstand","text":"","code":"avstand_min <- beregne_avstand(from_node = 26956,                                to_node = 210373,                                enhet = \"FT_MINUTES\") #> Error in igraph::shortest_paths(graph = graph, from = from_node, to = to_node,     output = \"both\", weights = graph %>% tidygraph::activate(edges) %>%         pull(!!as.name(enhet))): object 'graph' not found  avstand_meter <- beregne_avstand(from_node = 26956,                                  to_node = 210373,                                  enhet = \"LENGTH\") #> Error in igraph::shortest_paths(graph = graph, from = from_node, to = to_node,     output = \"both\", weights = graph %>% tidygraph::activate(edges) %>%         pull(!!as.name(enhet))): object 'graph' not found  path <- beregne_avstand(from_node = 26956,                         to_node = 210373,                         enhet = \"FT_MINUTES\",                         path = T) #> Error in igraph::shortest_paths(graph = graph, from = from_node, to = to_node,     output = \"both\", weights = graph %>% tidygraph::activate(edges) %>%         pull(!!as.name(enhet))): object 'graph' not found"},{"path":"/reference/beregne_avstand_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Beregne korteste kjøreavstand (cppRouting) — beregne_avstand_cpp","title":"Beregne korteste kjøreavstand (cppRouting) — beregne_avstand_cpp","text":"Funksjon å beregne korteste kjøreavstand (minutter eller meter) mellom eller flere noder vegnettet. Fungerer også med vektorer med flere adresser start_node og/eller to_node. å bruke funksjonen må vegnettet ha blitt lastet inn og omgjort til et cppRouting-objekt som heter \"graph_cppRouting_FT_MINUTES\" eller \"graph_cppRouting_LENGTH\". Dette gjøres med funksjonen vegnett_to_R.","code":""},{"path":"/reference/beregne_avstand_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Beregne korteste kjøreavstand (cppRouting) — beregne_avstand_cpp","text":"","code":"beregne_avstand_cpp(   from_node_ID,   to_node_ID,   enhet = \"FT_MINUTES\",   dist = \"all\" )"},{"path":"/reference/beregne_avstand_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Beregne korteste kjøreavstand (cppRouting) — beregne_avstand_cpp","text":"from_node_ID Numerisk vektor med én eller flere node-ID-er. to_node_ID Numerisk vektor med én eller flere node-ID-er. enhet Karaktervektor med \"FT_MINUTES\" å få korteste kjørerute målt minutter eller \"LENGTH\" korteste kjørerute målt meter. dist Karaktervektor som angir om man ønsker alle kjørerutene per from_node. Dersom man kun ønsker det korteste kjøreruten per from_node angir man dist = \"min\". \"max\" angir den lengste kjøreruten per from_node.","code":""},{"path":"/reference/beregne_avstand_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Beregne korteste kjøreavstand (cppRouting) — beregne_avstand_cpp","text":"Objekt (data.frame) med hvor mange minutter eller meter kjøreavstand det er mellom de angitte fra- og tilpunktene.","code":""},{"path":"/reference/beregne_avstand_cpp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Beregne korteste kjøreavstand (cppRouting) — beregne_avstand_cpp","text":"","code":"avstand_cpp_min <- beregne_avstand_cpp(26956,                                        210373,                                        enhet = \"FT_MINUTES\") #> Error in beregne_avstand_cpp(26956, 210373, enhet = \"FT_MINUTES\"): object 'graph_cppRouting_FT_MINUTES' not found  avstand_cpp_meter <- beregne_avstand_cpp(26956,                                          210373,                                          enhet = \"LENGTH\") #> Error in beregne_avstand_cpp(26956, 210373, enhet = \"LENGTH\"): object 'graph_cppRouting_LENGTH' not found"},{"path":"/reference/coords_to_google.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert coordinates to Google Maps — coords_to_google","title":"Convert coordinates to Google Maps — coords_to_google","text":"function coords_to_google can used convert coordinates sf object format easy copy paste Google Maps.","code":""},{"path":"/reference/coords_to_google.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert coordinates to Google Maps — coords_to_google","text":"","code":"coords_to_google(coords, crs_out = 25833)"},{"path":"/reference/coords_to_google.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert coordinates to Google Maps — coords_to_google","text":"coords sf object geometry column converted CRS 4326. crs_out Chosen coordinate reference system (CRS) geometry column returned sf object.","code":""},{"path":"/reference/coords_to_google.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert coordinates to Google Maps — coords_to_google","text":"sf object new column added (coords_google), addtional sf geometry column chosen CRS.","code":""},{"path":"/reference/coords_to_google.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert coordinates to Google Maps — coords_to_google","text":"","code":"address_to_coords(zip_code = \"0177\", address = \"Akersveien 26\") %>%   coords_to_google() #> Simple feature collection with 1 feature and 6 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 262320 ymin: 6650367 xmax: 262320 ymax: 6650367 #> Projected CRS: ETRS89 / UTM zone 33N #>            address zip_code kommunenummer kommunenavn ID #> 0177 Akersveien 26     0177          0301        OSLO  1 #>                           coords_google               geometry #> 0177 59.9220274187717, 10.7468516818247 POINT (262320 6650367)"},{"path":"/reference/coords_to_node.html","id":null,"dir":"Reference","previous_headings":"","what":"Connect coordinates to the nearest nodes in the road network — coords_to_node","title":"Connect coordinates to the nearest nodes in the road network — coords_to_node","text":"function coords_to_node can used find nearest nodes Norwegian road network (meters) chosen coordinates.","code":""},{"path":"/reference/coords_to_node.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Connect coordinates to the nearest nodes in the road network — coords_to_node","text":"","code":"coords_to_node(   coords,   nodes_object = nodes,   edges_object = edges,   direction = \"from\",   ID_col = \"ID\",   crs_out = 25833,   knn = 1,   membership = F )"},{"path":"/reference/coords_to_node.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Connect coordinates to the nearest nodes in the road network — coords_to_node","text":"coords sf object coordinates connected road network. nodes_object sf object nodes road network. can created function vegnett_to_R(). edges_object data frame edges road network. can created function vegnett_to_R(). direction Character vector points nodes points nodes. ID_col Character vector name ID column. Default value set “ID”. crs_out Numeric vector chosen coordinate reference system (CRS). knn Numeric vector chosen number nodes returned coordinates. knn = 1 nearest nodes chosen coordinates returned. knn = 2 two nearest nodes returned etc. membership Logical. TRUE search nodes limited nodes belong road network connected either nodes (possible either ). E.g. want search nodes belong road network nodes, membership set FALSE search nodes membership = TRUE nodes (order).","code":""},{"path":"/reference/coords_to_node.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Connect coordinates to the nearest nodes in the road network — coords_to_node","text":"object (data.frame) following columns; from_nodeID/to_nodeID, membership_from_node/membership_to_node, coords_google_from_node/coords_google_to_node, knn_from_node/knn_to_node, ID.","code":""},{"path":"/reference/coords_to_node.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Connect coordinates to the nearest nodes in the road network — coords_to_node","text":"function can used, nodes road network must converted sf object called nodes (another name supplied nodes_object argument). can done function vegnett_to_R().","code":""},{"path":"/reference/coords_to_node.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Connect coordinates to the nearest nodes in the road network — coords_to_node","text":"","code":"if (FALSE) { from <- address_to_coords(zip_code = \"0177\",                          address = \"Akersveien 26\") from_node <- coords_to_node(coords = from, direction = \"from\")  to <- address_to_coords(zip_code = \"2211\",                          address = \"Otervegen 23\") to_node <- coords_to_node(coords = to, direction = \"to\") }"},{"path":"/reference/koords_to_google.html","id":null,"dir":"Reference","previous_headings":"","what":"Koordinater til Google Maps — koords_to_google","title":"Koordinater til Google Maps — koords_to_google","text":"Funksjon å omgjøre koordinater til et format som er enkelt å klippe og lime inn Google Maps.","code":""},{"path":"/reference/koords_to_google.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Koordinater til Google Maps — koords_to_google","text":"","code":"koords_to_google(koords, crs_out = 25833)"},{"path":"/reference/koords_to_google.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Koordinater til Google Maps — koords_to_google","text":"koords sf-objekt med en geometrikolonne som skal omgjøres til CRS 4326 crs_out Ønsket koordinatsystem (CRS) geometrikolonnen til sf-objektet som returneres","code":""},{"path":"/reference/koords_to_google.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Koordinater til Google Maps — koords_to_google","text":"sf-objekt med en ny kolonne lagt til (coords_google)","code":""},{"path":"/reference/koords_to_google.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Koordinater til Google Maps — koords_to_google","text":"","code":"fra <- adresse_api_koord(postnummer = \"0177\",                          adresse = \"Akersveien 26\") %>%   koords_to_google()"},{"path":"/reference/node_koord.html","id":null,"dir":"Reference","previous_headings":"","what":"Knytte koordinater til noder i vegnettet — node_koord","title":"Knytte koordinater til noder i vegnettet — node_koord","text":"Funksjon å finne nærmeste punkter (noder) vegnettet til angitte koordinater.","code":""},{"path":"/reference/node_koord.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Knytte koordinater til noder i vegnettet — node_koord","text":"","code":"node_koord(   koords,   fra_til = \"fra\",   ID_col = \"ID\",   crs_out = 25833,   knn = 1,   membership = F )"},{"path":"/reference/node_koord.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Knytte koordinater til noder i vegnettet — node_koord","text":"koords sf-objekt med koordinatene man ønsker å plassere på vegnettet. fra_til Karaktervektor med \"fra\" dersom noden skal være et startpunkt eller \"til\" dersom noden skal være et stoppunkt. ID_col Karaktervektor med navnet på ID-kolonnen. crs_out Numerisk vektor ønsket koordinatsystem. knn Numerisk vektor med antall noder per som blir returnert per koordinat. Dersom knn = 1 returneres den nærmeste noden til kooordinatene, dersom knn = 2 returneres de nærmeste nodene til koordinatene osv. membership Boolsk. Dersom TRUE begrenses søket etter noder til å kun gjelde noder som tilhører et tilknyttet vegnettverk til fra- eller tilpunktet (kun mulig enten fra eller til).","code":""},{"path":"/reference/node_koord.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Knytte koordinater til noder i vegnettet — node_koord","text":"Objekt (data.frame) med kolonnene from_node/to_node, membership, coords_google_from_node/coords_google_to_node, nabor og ID","code":""},{"path":"/reference/node_koord.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Knytte koordinater til noder i vegnettet — node_koord","text":"","code":"fra <- adresse_api_koord(postnummer = \"0177\",                          adresse = \"Akersveien 26\") from_node <- node_koord(koords = fra, fra_til = \"fra\") #> Error in dplyr::filter(., nodeID %in% unique(edges$from)): object 'nodes' not found  til <- adresse_api_koord(postnummer = \"2211\",                          adresse = \"Otervegen 23\") to_node <- node_koord(koords = til, fra_til = \"til\") #> Error in dplyr::filter(., nodeID %in% unique(edges$to)): object 'nodes' not found"},{"path":"/reference/path_leaflet.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize the shortest path with Leaflet — path_leaflet","title":"Visualize the shortest path with Leaflet — path_leaflet","text":"function path_leaflet visualizes shortest path (minutes meters) calculated function shortest_path_igraph() (path = TRUE). Internet connection required load background tiles.","code":""},{"path":"/reference/path_leaflet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize the shortest path with Leaflet — path_leaflet","text":"","code":"path_leaflet(path, graph_object = graph)"},{"path":"/reference/path_leaflet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize the shortest path with Leaflet — path_leaflet","text":"path Object (list) created function shortest_path_igraph(), path = TRUE. graph_object road network structured tidy graph (tbl_graph object). can done function vegnett_to_R().","code":""},{"path":"/reference/path_leaflet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize the shortest path with Leaflet — path_leaflet","text":"Interactive Leaflet map shows shortest path (minutes meters) chosen node road network.","code":""},{"path":"/reference/path_leaflet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize the shortest path with Leaflet — path_leaflet","text":"","code":"if (FALSE) { path <- shortest_path_igraph(from_node_ID = 26956,                         to_node_ID = 210373,                         unit = \"minutes\",                         path = T) path_leaflet(path) }"},{"path":"/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"/reference/shortest_path_cppRouting.html","id":null,"dir":"Reference","previous_headings":"","what":"Shortest path (cppRouting) — shortest_path_cppRouting","title":"Shortest path (cppRouting) — shortest_path_cppRouting","text":"function shortest_path_cppRouting can used calculate shortest path (either minutes meters) two nodes Norwegian road network. function also works vectors multiple node ID’s. function can used, road network must converted cppRouting object called graph_cppRouting_minutes graph_cppRouting_meters (names supplied graph_cppRouting_object argument). can done function vegnett_to_R().","code":""},{"path":"/reference/shortest_path_cppRouting.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shortest path (cppRouting) — shortest_path_cppRouting","text":"","code":"shortest_path_cppRouting(   from_node_ID,   to_node_ID,   unit = \"minutes\",   dist = \"all\",   graph_cppRouting_object = graph_cppRouting_minutes )"},{"path":"/reference/shortest_path_cppRouting.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shortest path (cppRouting) — shortest_path_cppRouting","text":"from_node_ID Numeric vector one node ID’s. to_node_ID Numeric vector one node ID’s. unit Character vector minutes calculate shortest path minutes meters shortest path meters. dist Character vector specifies shortest paths supplied nodes returned (), minimum (min) maximum (max) value node ID returned. graph_cppRouting_object road network structured cppRouting graph object. can created function vegnett_to_R().","code":""},{"path":"/reference/shortest_path_cppRouting.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shortest path (cppRouting) — shortest_path_cppRouting","text":"Object (data.frame) many minutes meters shortest path supplied node ID’s.","code":""},{"path":"/reference/shortest_path_cppRouting.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shortest path (cppRouting) — shortest_path_cppRouting","text":"","code":"if (FALSE) { distance_min <- shortest_path_cppRouting(26956,                                        210373,                                        unit = \"minutes\")  distance_meter <- shortest_path_cppRouting(26956,                                          210373,                                          unit = \"meters\")                                          }"},{"path":"/reference/shortest_path_igraph.html","id":null,"dir":"Reference","previous_headings":"","what":"Shortest path (igraph) — shortest_path_igraph","title":"Shortest path (igraph) — shortest_path_igraph","text":"function shortest_path_igraph can used calculate shortest path (either minutes meters) nodes Norwegian road network. function can also return node link, .e. path, shortest path consists .","code":""},{"path":"/reference/shortest_path_igraph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shortest path (igraph) — shortest_path_igraph","text":"","code":"shortest_path_igraph(   from_node_ID,   to_node_ID,   graph_object = graph,   unit = \"minutes\",   path = F )"},{"path":"/reference/shortest_path_igraph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shortest path (igraph) — shortest_path_igraph","text":"from_node_ID Numeric value node ID (multiple node ID’s used, see function shortest_path_cppRouting()). to_node_ID Numeric value node ID (multiple node ID’s used, see function shortest_path_cppRouting()). graph_object road network structured tidy graph (tbl_graph object). can created function vegnett_to_R(). unit Character vector minutes calculate shortest path minutes meters shortest path meters. path Logical. TRUE node link shortest path returned.","code":""},{"path":"/reference/shortest_path_igraph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shortest path (igraph) — shortest_path_igraph","text":"Vector shortest path minutes meters. path = TRUE node link shortest path consists returned.","code":""},{"path":"/reference/shortest_path_igraph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Shortest path (igraph) — shortest_path_igraph","text":"function can used, road network must converted tbl_graph object. can done function vegnett_to_R()). objects graph edges needs loaded.","code":""},{"path":"/reference/shortest_path_igraph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shortest path (igraph) — shortest_path_igraph","text":"","code":"if (FALSE) { distance_min <- shortest_path_igraph(from_node_ID = 26956,                                to_node_ID = 210373,                                unit = \"minutes\")  distance_meter <- shortest_path_igraph(from_node_ID = 26956,                                  to_node_ID = 210373,                                  unit = \"meters\")  path <- shortest_path_igraph(from_node_ID = 26956,                         to_node_ID = 210373,                         unit = \"minutes\",                         path = T)                         }"},{"path":"/reference/vegnett_sampledata.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample data — vegnett_sampledata","title":"Sample data — vegnett_sampledata","text":"Sample Norwegian Road Network (vegnettRuteplan_FGDB_20210528.gdb) downloaded Geonorge. first 1000 rows Oslo county included.","code":""},{"path":"/reference/vegnett_sampledata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample data — vegnett_sampledata","text":"","code":"data(vegnett_sampledata)"},{"path":"/reference/vegnett_sampledata.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample data — vegnett_sampledata","text":"object class sf.","code":""},{"path":"/reference/vegnett_sampledata.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Sample data — vegnett_sampledata","text":"National roads database - road network routing","code":""},{"path":"/reference/vegnett_sampledata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample data — vegnett_sampledata","text":"","code":"data(vegnett_sampledata) class(vegnett_sampledata) #> [1] \"sf\"         \"tbl_df\"     \"tbl\"        \"data.frame\" head(vegnett_sampledata) #> Simple feature collection with 6 features and 45 fields #> Geometry type: MULTILINESTRING #> Dimension:     XYZ #> Bounding box:  xmin: 255885.9 ymin: 6650426 xmax: 255984.8 ymax: 6650472 #> z_range:       zmin: 24.4 zmax: 26.453 #> Projected CRS: ETRS89 / UTM zone 33N #> # A tibble: 6 x 46 #>   ROUTEID FROM_M  TO_M FromNodeID ToNod~1 GATEN~2 VEGTYPE ONEWAY FT_MI~3 TF_MI~4 #>   <chr>    <dbl> <dbl> <chr>      <chr>   <chr>   <chr>   <chr>    <dbl>   <dbl> #> 1 1209471  0     0.807 1209475    2673001 Rv150   R       FT     0.0508  0.0508  #> 2 1209471  0.807 1     2673001    1209476 Rv150   R       FT     0.0125  0.0125  #> 3 1209472  0     0.218 1209477    2673002 Rv150   R       FT     0.0138  0.0138  #> 4 1209472  0.218 1     2673002    1209478 Rv150   R       FT     0.0517  0.0517  #> 5 1209473  0     0.129 627807     3066146 Rv150   R       FT     0.00755 0.00755 #> 6 1209473  0.129 1     3066146    1209475 Rv150   R       FT     0.0399  0.0399  #> # ... with 36 more variables: METER_ORG <dbl>, VEGNUMMER <int>, FYLKE_ID <chr>, #> #   HIERARCHY <int>, HIERARCHY_FVK <int>, FuncRoadClass <int>, VEGID <chr>, #> #   SPECIALVEG <chr>, URL <chr>, ATTRIBUTES <chr>, FT_BOM_LIT <dbl>, #> #   FT_BOM_STO <dbl>, TF_BOM_LIT <dbl>, TF_BOM_STO <dbl>, SPERRING <int>, #> #   DT_TURIST_FT <dbl>, DT_TURIST_TF <dbl>, DT_TRUCK_FT <dbl>, #> #   DT_TRUCK_TF <dbl>, TOTALVIKT <dbl>, SK_HO_FT <dbl>, SK_HO_TF <dbl>, #> #   VOGNTOGLENGDE <dbl>, RoadClass <int>, Medium <chr>, FT_Fart <int>, ..."},{"path":"/reference/vegnett_to_R.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert the Norwegian road network (NVDB Ruteplan nettverksdatasett) into network graphs in R — vegnett_to_R","title":"Convert the Norwegian road network (NVDB Ruteplan nettverksdatasett) into network graphs in R — vegnett_to_R","text":"function vegnett_to_R can used convert Norwegian road network, downloaded Geonorge, formats enable network analysis R (tbl_graph cppRouting).","code":""},{"path":"/reference/vegnett_to_R.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert the Norwegian road network (NVDB Ruteplan nettverksdatasett) into network graphs in R — vegnett_to_R","text":"","code":"vegnett_to_R(   vegnett,   crs_out = 25833,   year = 2022,   fromnodeID = \"FROMNODE\",   tonodeID = \"TONODE\",   FT_minutes = \"DRIVETIME_FW\",   TF_minutes = \"DRIVETIME_BW\",   meters = \"SHAPE_LENGTH\",   turn_restrictions = FALSE,   ferry = TRUE )"},{"path":"/reference/vegnett_to_R.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert the Norwegian road network (NVDB Ruteplan nettverksdatasett) into network graphs in R — vegnett_to_R","text":"vegnett Norwegian road network sf object, downloaded Geonorge. crs_out Numeric vector chosen coordinate reference system (CRS). default value set CRS 25833. year Numeric vector year road network . Due changes format files 2021 2022, important thing choose \"old\" format (-2021) new format (2022-). default value set 2022. Please see example column names 2021 earlier. fromnodeID Character vector name column indicating node ID. Default value set FROMNODE (column name 2022). tonodeID Character vector name column indicating node ID. Default value set TONODE (column name 2022). FT_minutes Character vector name column contains cost minutes fromnodeID tonodeID (FT). Default value set DRIVETIME_FW (column name 2022). TF_minutes Character vector name column contains cost minutes tonodeID fromnodeID (TF). Default value set DRIVETIME_BW (column name 2022). meters Character vector name column contains cost meters (equal FT TF). Default value set SHAPE_LENGTH (column name 2022). turn_restrictions Logical. Default value FALSE. TRUE turn restrictions added road network. turn restrictions layer road network file loaded can used (object called turnrestrictions_geom). Due errors turn restrictions file 2022 recommended use feature now. ferry Logical/numeric vector. Default value TRUE means edges involve ferries given original drive time (somewhere 10 13 km/h). numeric value supplied, cost edges involving ferries converted supplied value km/h.","code":""},{"path":"/reference/vegnett_to_R.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert the Norwegian road network (NVDB Ruteplan nettverksdatasett) into network graphs in R — vegnett_to_R","text":"List containing following elements: [1] graph: road network structured tidy graph (tbl_graph object). [2] nodes: road network's nodes (sf object). [3] edges: road network's edges/node links (data.frame). [4] graph_cppRouting_minutes: road network structured cppRouting graph cost travel minutes (cppRouting object). [5] graph_cppRouting_meters: road network structured cppRouting graph cost travel meters (cppRouting object).","code":""},{"path":"/reference/vegnett_to_R.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert the Norwegian road network (NVDB Ruteplan nettverksdatasett) into network graphs in R — vegnett_to_R","text":"","code":"vegnett_sampledata #> Simple feature collection with 1000 features and 45 fields #> Geometry type: MULTILINESTRING #> Dimension:     XYZ #> Bounding box:  xmin: 248861 ymin: 6639120 xmax: 273377.4 ymax: 6672977 #> z_range:       zmin: -999999 zmax: 448.88 #> Projected CRS: ETRS89 / UTM zone 33N #> # A tibble: 1,000 x 46 #>    ROUTEID FROM_M  TO_M FromNod~1 ToNod~2 GATEN~3 VEGTYPE ONEWAY FT_MI~4 TF_MI~5 #>    <chr>    <dbl> <dbl> <chr>     <chr>   <chr>   <chr>   <chr>    <dbl>   <dbl> #>  1 1209471  0     0.807 1209475   2673001 Rv150   R       FT     0.0508  0.0508  #>  2 1209471  0.807 1     2673001   1209476 Rv150   R       FT     0.0125  0.0125  #>  3 1209472  0     0.218 1209477   2673002 Rv150   R       FT     0.0138  0.0138  #>  4 1209472  0.218 1     2673002   1209478 Rv150   R       FT     0.0517  0.0517  #>  5 1209473  0     0.129 627807    3066146 Rv150   R       FT     0.00755 0.00755 #>  6 1209473  0.129 1     3066146   1209475 Rv150   R       FT     0.0399  0.0399  #>  7 1209474  0     0.828 1209478   3278307 Rv150   R       FT     0.0425  0.0425  #>  8 1209474  0.828 1     3278307   627806  Rv150   R       FT     0.00883 0.00883 #>  9 1209419  0     1     1209425   1209426 Rv163   R       FT     0.0993  0.0993  #> 10 1209420  0     1     1209426   1209427 Rv163   R       FT     0.174   0.174   #> # ... with 990 more rows, 36 more variables: METER_ORG <dbl>, VEGNUMMER <int>, #> #   FYLKE_ID <chr>, HIERARCHY <int>, HIERARCHY_FVK <int>, FuncRoadClass <int>, #> #   VEGID <chr>, SPECIALVEG <chr>, URL <chr>, ATTRIBUTES <chr>, #> #   FT_BOM_LIT <dbl>, FT_BOM_STO <dbl>, TF_BOM_LIT <dbl>, TF_BOM_STO <dbl>, #> #   SPERRING <int>, DT_TURIST_FT <dbl>, DT_TURIST_TF <dbl>, DT_TRUCK_FT <dbl>, #> #   DT_TRUCK_TF <dbl>, TOTALVIKT <dbl>, SK_HO_FT <dbl>, SK_HO_TF <dbl>, #> #   VOGNTOGLENGDE <dbl>, RoadClass <int>, Medium <chr>, FT_Fart <int>, ... vegnett_list <- vegnett_to_R(vegnett = vegnett_sampledata,                              year = 2021,                              fromnodeID = \"FROMNODEID\",                              tonodeID = \"TONODEID\",                              FT_minutes = \"FT_MINUTES\",                              TF_minutes = \"TF_MINUTES\",                              meters = \"SHAPE_LENGTH\")  graph <- vegnett_list[[1]] nodes <- vegnett_list[[2]] edges <- vegnett_list[[3]] graph_cppRouting_minutes <- vegnett_list[[4]] graph_cppRouting_meters <- vegnett_list[[5]]  graph #> # A tbl_graph: 1159 nodes and 1741 edges #> # #> # A directed multigraph with 195 components #> # #> # Node Data: 1,159 x 50 (active) #>   ROUTEID FROM_M  TO_M FROMNO~ TONODE~ GATENA~ VEGTYPE ONEWAY FT_MIN~ TF_MIN~ #>   <chr>    <dbl> <dbl> <chr>   <chr>   <chr>   <chr>   <chr>    <dbl>   <dbl> #> 1 1214418      0     1 1662509 1214440 \"priva~ P       B       0.0284  0.0284 #> 2 1214418      0     1 1662509 1214440 \"priva~ P       B       0.0284  0.0284 #> 3 1214420      0     1 1214442 1662511 \"Thorn~ P       B       0.0476  0.0476 #> 4 1214420      0     1 1214442 1662511 \"Thorn~ P       B       0.0476  0.0476 #> 5 1214425      0     1 1214447 1662513 \"priva~ P       B       0.0262  0.0262 #> 6 1214425      0     1 1214447 1662513 \"priva~ P       B       0.0262  0.0262 #> # ... with 1,153 more rows, and 40 more variables: METER_ORG <dbl>, #> #   VEGNUMMER <int>, FYLKE_ID <chr>, HIERARCHY <int>, HIERARCHY_FVK <int>, #> #   FUNCROADCLASS <int>, VEGID <chr>, SPECIALVEG <chr>, URL <chr>, #> #   ATTRIBUTES <chr>, FT_BOM_LIT <dbl>, FT_BOM_STO <dbl>, TF_BOM_LIT <dbl>, #> #   TF_BOM_STO <dbl>, SPERRING <int>, DT_TURIST_FT <dbl>, DT_TURIST_TF <dbl>, #> #   DT_TRUCK_FT <dbl>, DT_TRUCK_TF <dbl>, TOTALVIKT <dbl>, SK_HO_FT <dbl>, #> #   SK_HO_TF <dbl>, VOGNTOGLENGDE <dbl>, ROADCLASS <int>, MEDIUM <chr>, #> #   FT_FART <int>, TF_FART <int>, BRUKSKLASSE <chr>, BK_VINTER <chr>, #> #   TOTVEKT_TOMMER <dbl>, LENGDE_TOMMER <dbl>, FROM_Z <dbl>, TO_Z <dbl>, #> #   ISBIKEROAD <int>, SHAPE_LENGTH <dbl>, direction <chr>, #> #   FROMNODEID_new <chr>, TONODEID_new <chr>, nodeID <int>, geometry <POINT #> #   [m]> #> # #> # Edge Data: 1,741 x 52 #>    from    to ROUTEID FROM_M  TO_M FROMNO~ TONODE~ GATENA~ VEGTYPE ONEWAY #>   <int> <int> <chr>    <dbl> <dbl> <chr>   <chr>   <chr>   <chr>   <chr>  #> 1     1     2 1214418      0     1 1662509 1214440 \"priva~ P       B      #> 2     3     4 1214420      0     1 1214442 1662511 \"Thorn~ P       B      #> 3     5     6 1214425      0     1 1214447 1662513 \"priva~ P       B      #> # ... with 1,738 more rows, and 42 more variables: minutes <dbl>, #> #   TF_MINUTES <dbl>, METER_ORG <dbl>, VEGNUMMER <int>, FYLKE_ID <chr>, #> #   HIERARCHY <int>, HIERARCHY_FVK <int>, FUNCROADCLASS <int>, VEGID <chr>, #> #   SPECIALVEG <chr>, URL <chr>, ATTRIBUTES <chr>, FT_BOM_LIT <dbl>, #> #   FT_BOM_STO <dbl>, TF_BOM_LIT <dbl>, TF_BOM_STO <dbl>, SPERRING <int>, #> #   DT_TURIST_FT <dbl>, DT_TURIST_TF <dbl>, DT_TRUCK_FT <dbl>, #> #   DT_TRUCK_TF <dbl>, TOTALVIKT <dbl>, SK_HO_FT <dbl>, SK_HO_TF <dbl>, #> #   VOGNTOGLENGDE <dbl>, ROADCLASS <int>, MEDIUM <chr>, FT_FART <int>, #> #   TF_FART <int>, BRUKSKLASSE <chr>, BK_VINTER <chr>, TOTVEKT_TOMMER <dbl>, #> #   LENGDE_TOMMER <dbl>, FROM_Z <dbl>, TO_Z <dbl>, ISBIKEROAD <int>, #> #   meters <dbl>, geometry <LINESTRING [m]>, direction <chr>, edgeID <int>, #> #   FROMNODEID_new <chr>, TONODEID_new <chr> nodes #> Simple feature collection with 1159 features and 2 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 248861 ymin: 6639120 xmax: 273374.5 ymax: 6672977 #> Projected CRS: ETRS89 / UTM zone 33N #> First 10 features: #>    nodeID membership                 geometry #> 1       1          1 POINT (266382.6 6639605) #> 2       2          1 POINT (266378.9 6639596) #> 3       3          2 POINT (266349.2 6639372) #> 4       4          2 POINT (266349.4 6639389) #> 5       5          3 POINT (266360.5 6639120) #> 6       6          3 POINT (266369.4 6639120) #> 7       7          4 POINT (266351.3 6639416) #> 8       8          4 POINT (266359.4 6639416) #> 9       9          5 POINT (266548.5 6639482) #> 10     10          5 POINT (266549.8 6639514) head(edges) #>   from to ROUTEID    FROM_M     TO_M FROMNODEID TONODEID #> 1    1  2 1214418 0.0000000 1.000000    1662509  1214440 #> 2    3  4 1214420 0.0000000 1.000000    1214442  1662511 #> 3    5  6 1214425 0.0000000 1.000000    1214447  1662513 #> 4    7  8 1214427 0.0000000 1.000000    1214448  1662515 #> 5    9 10 1214430 0.2488051 0.311621    2030964  2717563 #> 6   10 11 1214430 0.3116210 0.357439    2717563  1906573 #>                    GATENAVN VEGTYPE ONEWAY    minutes TF_MINUTES METER_ORG #> 1                privat veg       P      B 0.02842094 0.02842094  9.666985 #> 2 Thorn D<U+00F8>nhaugs Vei       P      B 0.04759177 0.04759177 16.187677 #> 3                privat veg       P      B 0.02618001 0.02618001  8.904767 #> 4 Thorn D<U+00F8>nhaugs Vei       P      B 0.02397816 0.02397816  8.155837 #> 5              kommunal veg       K      B 0.09209707 0.09209707 31.540092 #> 6              kommunal veg       K      B 0.06537617 0.06537617 22.389101 #>   VEGNUMMER FYLKE_ID HIERARCHY HIERARCHY_FVK FUNCROADCLASS    VEGID SPECIALVEG #> 1     81795        3         3             3             7 {P81795}            #> 2     20496        3         3             3             7 {P20496}            #> 3     81754        3         3             3             7 {P81754}            #> 4     20496        3         3             3             7 {P20496}            #> 5     81753        3         3             3            -1 {K81753}            #> 6     81753        3         3             3            -1 {K81753}            #>   URL ATTRIBUTES FT_BOM_LIT FT_BOM_STO TF_BOM_LIT TF_BOM_STO SPERRING #> 1                         0          0          0          0       -1 #> 2                         0          0          0          0       -1 #> 3                         0          0          0          0       -1 #> 4                         0          0          0          0       -1 #> 5                         0          0          0          0       -1 #> 6                         0          0          0          0       -1 #>   DT_TURIST_FT DT_TURIST_TF DT_TRUCK_FT DT_TRUCK_TF TOTALVIKT SK_HO_FT SK_HO_TF #> 1   0.02842094   0.02842094          NA          NA        NA       NA       NA #> 2   0.04759177   0.04759177          NA          NA        NA       NA       NA #> 3   0.02618001   0.02618001          NA          NA        NA       NA       NA #> 4   0.02397816   0.02397816          NA          NA        NA       NA       NA #> 5   0.09209707   0.09209707          NA          NA        NA       NA       NA #> 6   0.06537617   0.06537617          NA          NA        NA       NA       NA #>   VOGNTOGLENGDE ROADCLASS MEDIUM FT_FART TF_FART    BRUKSKLASSE BK_VINTER #> 1            NA         0             30      30                       -1 #> 2            NA         0             30      30                       -1 #> 3            NA         0             30      30                       -1 #> 4            NA         0             30      30                       -1 #> 5            NA         0             30      30 Bk10 - 50 tonn        -1 #> 6            NA         0             30      30 Bk10 - 50 tonn        -1 #>   TOTVEKT_TOMMER LENGDE_TOMMER   FROM_Z     TO_Z ISBIKEROAD    meters #> 1             -1          -1.0 160.7000 160.7000          0  9.666985 #> 2             -1          -1.0 171.1600 171.1600          0 16.187677 #> 3             -1          -1.0 172.5704 172.5704          0  8.904767 #> 4             -1          -1.0 169.4539 169.5000          0  8.155837 #> 5             -1          19.5 179.8200 179.8440          1 31.540092 #> 6             -1          19.5 179.8440 179.6700          1 22.389101 #>                         geometry direction edgeID FROMNODEID_new TONODEID_new #> 1 LINESTRING (266382.6 663960...      B_FT      1        1662509      1214440 #> 2 LINESTRING (266349.2 663937...      B_FT      2        1214442      1662511 #> 3 LINESTRING (266360.5 663912...      B_FT      3        1214447      1662513 #> 4 LINESTRING (266351.3 663941...      B_FT      4        1214448      1662515 #> 5 LINESTRING (266548.5 663948...      B_FT      5        2030964      2717563 #> 6 LINESTRING (266549.8 663951...      B_FT      6        2717563      1906573 head(graph_cppRouting_minutes$data) #>   from  to       dist #> 1    0 837 0.02842094 #> 2    1 838 0.04759177 #> 3    2 839 0.02618001 #> 4    3 840 0.02397816 #> 5    4   5 0.09209707 #> 6    5 841 0.06537617 head(graph_cppRouting_minutes$coords) #>    nodeID        X       Y #> 1       1 266382.6 6639605 #> 3       3 266349.2 6639372 #> 5       5 266360.5 6639120 #> 7       7 266351.3 6639416 #> 9       9 266548.5 6639482 #> 10     10 266549.8 6639514 head(graph_cppRouting_minutes$dict) #>   ref id #> 1   1  0 #> 2   3  1 #> 3   5  2 #> 4   7  3 #> 5   9  4 #> 6  10  5 graph_cppRouting_minutes$nbnode #> [1] 1159  head(graph_cppRouting_meters$data) #>   from  to      dist #> 1    0 837  9.666985 #> 2    1 838 16.187677 #> 3    2 839  8.904767 #> 4    3 840  8.155837 #> 5    4   5 31.540092 #> 6    5 841 22.389101 head(graph_cppRouting_meters$coords) #>    nodeID        X       Y #> 1       1 266382.6 6639605 #> 3       3 266349.2 6639372 #> 5       5 266360.5 6639120 #> 7       7 266351.3 6639416 #> 9       9 266548.5 6639482 #> 10     10 266549.8 6639514 head(graph_cppRouting_meters$dict) #>   ref id #> 1   1  0 #> 2   3  1 #> 3   5  2 #> 4   7  3 #> 5   9  4 #> 6  10  5 graph_cppRouting_meters$nbnode #> [1] 1159"}]
