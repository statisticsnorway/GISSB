[{"path":"/articles/GISSB_vignette.html","id":"adresse-til-koordinater-address_to_coord","dir":"Articles","previous_headings":"","what":"Adresse til koordinater (address_to_coord)","title":"GISSB - Network analysis in R","text":"Funksjonen address_to_coord bruker Kartverkets adresse-API å finne koordinater til adresser. Denne API-en krever nettilgang og baserer seg på matrikkelen (som er Norges offisielle eiendomsregister og inneholder alle offisielle adresser og tilhørende koordinater). Ved å skrive inn et postnummer med tilhørende adresse (med adressenummer hvis tilgjengelig) returneres et sf-objekt med koordinatene til denne adressen. Standardverdi projeksjonen av koordinatene er satt til CRS 25833. Dette er det offisielle koordinatsystemet Norge og brukes de fleste norske kartfiler. Det er også mulig å benytte CRS 4326 å plassere koordinatene på kart med åpen kildekode (som f.eks. Leaflet) eller enklere søke opp koordinater Google Maps. Koordinatsystemet CRS 4326 er derimot ikke metrisk og man kan derfor ikke måle avstander meter når man bruker dette. Derfor anbefales det kun å bruke CRS 4326 forbindelse med visualisering. å få koordinatene med CRS 4326 må dette spesifiseres funksjonen address_to_coord. Det er også mulig å angi en vektor med flere postnummere og adresser å få koordinatene til flere adresser: Man kan dermed plassere koordinatene på kartet, med pakken Leaflet:","code":"fra <- GISSB::address_to_coord(zip_code = \"0177\",                          address = \"Akersveien 26\")  fra #> Simple feature collection with 1 feature and 5 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 262320 ymin: 6650367 xmax: 262320 ymax: 6650367 #> Projected CRS: ETRS89 / UTM zone 33N #>            address zip_code kommunenummer kommunenavn ID               geometry #> 0177 Akersveien 26     0177          0301        OSLO  1 POINT (262320 6650367)  til <- GISSB::address_to_coord(zip_code = \"2211\",                          address = \"Otervegen 23\")  til #> Simple feature collection with 1 feature and 5 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 334492 ymin: 6674510 xmax: 334492 ymax: 6674510 #> Projected CRS: ETRS89 / UTM zone 33N #>           address zip_code kommunenummer kommunenavn ID               geometry #> 2211 Otervegen 23     2211          3401 KONGSVINGER  1 POINT (334492 6674510) postnummere = c(\"0177\", \"2211\") adresser = c(\"Akersveien 26\", \"Otervegen 23\")  fra_4326 <- GISSB::address_to_coord(zip_code = postnummere,                          address = adresser,                          crs_out = 4326) fra_4326 #> Simple feature collection with 2 features and 5 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 10.74685 ymin: 59.92203 xmax: 12.01638 ymax: 60.17383 #> Geodetic CRS:  WGS 84 #>            address zip_code kommunenummer kommunenavn ID #> 0177 Akersveien 26     0177          0301        OSLO  1 #> 2211  Otervegen 23     2211          3401 KONGSVINGER  2 #>                       geometry #> 0177 POINT (10.74685 59.92203) #> 2211 POINT (12.01638 60.17383) leaflet::leaflet() %>%   leaflet::addTiles() %>%   leaflet::addMarkers(data = fra_4326$geometry)"},{"path":"/articles/GISSB_vignette.html","id":"koordinater-til-å-søke-opp-i-google-maps-coords_to_google","dir":"Articles","previous_headings":"","what":"Koordinater til å søke opp i Google Maps (coords_to_google)","title":"GISSB - Network analysis in R","text":"Når man skal kombinere ulike datakilder er det viktig alle filene er angitt med samme koordinatsystem. Om man ønsker å beholde sf-objektet med CRS 25833, men ønsker å legge til en kolonne med koordinatene CRS 4326 (som er enklere å klippe og lime inn Google Maps) kan man bruke funksjonen coords_to_google. Da legges det til en kolonne som heter coords_google.","code":"fra <- GISSB::coords_to_google(fra) fra$coords_google #> [1] \"59.9220274187717, 10.7468516818247\"  til <- GISSB::coords_to_google(til) til$coords_google #> [1] \"60.1738313973094, 12.0163762410388\""},{"path":"/articles/GISSB_vignette.html","id":"databehandling-av-vegnettet-vegnett_to_r","dir":"Articles","previous_headings":"","what":"Databehandling av vegnettet (vegnett_to_R)","title":"GISSB - Network analysis in R","text":"å beregne kjøreavstand mellom ulike koordinater benyttes vegnettet fra Nasjonal vegdatabank (NVDB). Dette har blitt gjort tilgjenglig på Q- og X-disken av GIS-ressurssenter. Når man laster inn vegnettverksfilen som et sf-objekt ser den slik ut (begrenset til å kun gjelde Oslo, Akershus og Hedmark):  vegnettet skal kunne brukes til nettverksanalyser R må formatet omgjøres (med pakkene igraph og cppRouting). Funksjonen vegnett_to_R kan brukes til dette formålet. Resultatet er en liste med følgende objekter: [1] graph (tbl_graph) [2] nodes (sf) [3] edges (data.frame) [4] graph_cppRouting_FT_MINUTES (cppRouting) [5] graph_cppRouting_LENGTH (cppRouting) nodes og edges benyttes å plassere koordinatene til sitt nærmeste punkt vegnettet med funksjonen coords_to_node. graph benyttes å beregne korteste kjøretid/-vei meter eller minutter med funksjonen beregne avstand. Denne benyttes også å vise hvilke noder hvilken rekkefølge som utgjør den korteste kjøreavstanden. graph_cppRouting_FT_MINUTES benyttes å beregne korteste kjøretid minutter med funksjonen shortest_path_cppRouting. graph_cppRouting_LENGTH benyttes å beregne korteste kjøreavstand meter. Vegnettet består av punkter som er plassert ca. 50 meter fra hverandre. Disse punktene kalles noder. Lenkene som forbinder punktene sammen heter edges. en mer detaljert gjennomgang av struktren til vegnettet og hvordan dette blir behandlet, se .","code":"ggplot() +   ggplot2::geom_sf(data = vegnett) vegnett_list <- GISSB::vegnett_to_R(vegnett = vegnett)  graph <- vegnett_list[[1]] nodes <- vegnett_list[[2]] edges <- vegnett_list[[3]] graph_cppRouting_FT_MINUTES <- vegnett_list[[4]] graph_cppRouting_LENGTH <- vegnett_list[[5]]"},{"path":"/articles/GISSB_vignette.html","id":"knytter-koordinater-til-vegnettet-coords_to_node","dir":"Articles","previous_headings":"","what":"Knytter koordinater til vegnettet (coords_to_node)","title":"GISSB - Network analysis in R","text":"å kunne beregne kjøretid-/vei fra et valgt start- og stoppunkt (uten å vite hvilken node-ID disse har) må man knytte adressene til deres nærmeste punkt vegnettet. Dette gjøres ved å finne hvilken node som er den nærmeste et gitt koordinatpunkt (X og Y). Ved å bruke funksjonen knn fra pakken nabor finner man det nærmeste punktet meter (målt luftlinje). knn = 1 betyr man kun er interessert det nærmeste punktet og dette er satt som default. Dersom denne settes til et annet tall (gjøres ved å legge til argumentet knn = X funksjonen) får man det nærmeste, nest nærmeste, tredje nærmeste punktet osv. Dette kan være nyttig dersom det nærmeste punktet vegnettet ikke finner en gyldig rute pga. enveiskjørte veier eller andre brudd vegnettet. funksjonen coords_to_node legger man inn et sf-objekt med koordinatene til ett eller flere punkter. Resultatet er et objekt (data.frame) der node-ID-en til den nærmeste noden til koordinatene målt luftlinje har blitt lagt til (from_node/to_node). tillegg viser kolonnen avstand_koord_node_from/avstand_koord_node_to hvor mange meter det er luftlinje mellom koordinatene og det nærmeste punktet vegnettverket. Dette kan være nyttig å avgjøre om det er enkelte punkter/koordinater som har tildelt noder som er langt fra hverandre. å kjøre koden må objektene nodes og edges (som lages med funksjonen vegnett_to_R) være lastet inn. Vegnettet består av flere mindre vegnett der flere ikke har noen tilknytning til hverandre. Dersom man har et startpunkt som tilhører en annen del av vegnettet enn stoppunktet vil det ikke være mulig å finne en gyldig rute mellom disse. Se mer om dette “Ett eller flere separate vegnett?” . Man legger til argumentet membership = TRUE å begrense listen hvilke noder man leter etter til å kun gjelde noder som er tilknyttet samme vegnett som enten start- eller stoppnoden. Dette kan bare gjøres enten “fra” eller “til” og koden som har membership = FALSE må kjøres før koden som har membership = TRUE:","code":"from_node <- GISSB::coords_to_node(coords = fra, direction = \"from\") from_node #>       from_node membership            coords_google_from_node knn ID #> 26956     26956          1 59.9218595345493, 10.7466025807057   1  1 #>       dist_coord_node_from #> 26956              23.3298  to_node <- GISSB::coords_to_node(coords = til, direction = \"to\") to_node #>        to_node membership              coords_google_to_node knn ID #> 210373  210373          1 60.1729945919562, 12.0157389790561   1  1 #>        dist_coord_node_to #> 210373           99.71126 from_node <- GISSB::coords_to_node(coords = fra, direction = \"from\", membership = F) from_node #>       from_node membership            coords_google_from_node knn ID #> 26956     26956          1 59.9218595345493, 10.7466025807057   1  1 #>       dist_coord_node_from #> 26956              23.3298  to_node <- GISSB::coords_to_node(coords = til, direction = \"to\", membership = T) to_node #>        to_node membership              coords_google_to_node knn ID #> 196387  210373          1 60.1729945919562, 12.0157389790561   1  1 #>        dist_coord_node_to #> 196387           99.71126"},{"path":"/articles/GISSB_vignette.html","id":"beregner-kjøreavstand-med-tidygraph-shortest_path_igraph","dir":"Articles","previous_headings":"","what":"Beregner kjøreavstand med tidygraph (shortest_path_igraph)","title":"GISSB - Network analysis in R","text":"Når man har en node-ID både start- og stoppunkt kan man benytte funksjonen shortest_path_igraph å beregne den korteste kjøreavstanden mellom disse. å beregne korteste kjøreavstand minutter setter man enhet = “FT_MINUTES” (default), mens enhet = “LENGTH” beregner korteste kjøreavstand meter. å kjøre koden må objektet graph (som lages med funksjonen vegnett_to_R) være lastet inn. OBS: shortest_path_igraph fungerer ikke med vektorer, dvs. liste flere fra- eller tilnoder. Det er kun mulig å beregne avstander én til én. å beregne avstand med flere fra- og/eller tilnoder, se shortest_path_cppRouting. Dersom man ønsker å få oppgitt hvilke noder hvilken rekkefølge som utgjør den korteste ruten mellom start- og stoppunktet setter man argumentet path = TRUE. Det er mulig å visualisere denne ruten (path) ved å bruke funksjonen path_leaflet:","code":"avstand_min <- GISSB::shortest_path_igraph(from_node_ID = from_node$from_node,                            to_node_ID = to_node$to_node,                            unit = \"FT_MINUTES\",                            path = F)  paste0(round(avstand_min$length, digits = 1), \" minutter / \",        substr(avstand_min$length/60, 1, 1),        \" timer og \",        round(avstand_min$length, digits = 0)-as.numeric(substr(avstand_min$length/60, 1, 1))*60, \" minutter\") #> [1] \"85.9 minutter / 1 timer og 26 minutter\"  avstand_meter <- GISSB::shortest_path_igraph(from_node_ID = from_node$from_node,                                  to_node_ID = to_node$to_node,                                  unit = \"LENGTH\",                                  path = F)  paste0(round(avstand_meter$length, digits = 1), \" meter / \",        round(avstand_meter$length/1000, digits = 1), \" km.\"        ) #> [1] \"94643.9 meter / 94.6 km.\" path <- GISSB::shortest_path_igraph(from_node_ID = from_node$from_node,                            to_node_ID = to_node$to_node,                            unit = \"FT_MINUTES\",                            path = T)  path$epath #> [[1]] #> + 544/618187 edges from dd1c0ba: #>  [1]  26956-> 27096  27096-> 87438  87438->189224 189224->189225 189225->227673 #>  [6] 227673->230389 230389->242076 242076-> 99120  99120-> 99117  99117->242077 #> [11] 242077->242078 242078->224933 224933->100660 100660->224934 224934->288314 #> [16] 288314->288316 288316->226476 226476->226477 226477->226478 226478->226479 #> [21] 226479->226480 226480->226481 226481->226482 226482-> 99588  99588->226483 #> [26] 226483->225276 225276->225275 225275->226335 226335->226336 226336->226337 #> [31] 226337->226338 226338->226339 226339->226340 226340->226341 226341->226342 #> [36] 226342->226343 226343->226344 226344->294435 294435->293148 293148->296809 #> [41] 296809->296808 296808->296807 296807->296806 296806->296805 296805->224450 #> [46] 224450->100181 100181->224635 224635->296804 296804->293675 293675->293676 #> + ... omitted several edges GISSB::path_leaflet(path)"},{"path":"/articles/GISSB_vignette.html","id":"beregner-kjøreavstand-med-cpprouting-shortest_path_cpprouting","dir":"Articles","previous_headings":"","what":"Beregner kjøreavstand med cppRouting (shortest_path_cppRouting)","title":"GISSB - Network analysis in R","text":"Det er mulig å bruke funksjonen shortest_path_igraph til å beregne kjøretid/-vei, men dette kan ta veldig lang tid dersom man skal beregne kjøreavstanden mellom mange koordinater. Derfor er det best å heller bruke funksjonen shortest_path_cppRouting. Denne funksjonen bruker pakken cppRouting som benytter et annet format på dataene som krever mindre minne og benytter parallellprosessering, noe som gjør kjøringer går mye raskere. tillegg lagres ikke informasjonen om selve ruten, kun avstanden minutter eller meter. Dette er en fordel mtp. på tiden det tar å kjøre koden, men ulempen er man ikke får sjekket hvilke veglenker hver rute består av. Dette kan derfor funksjonen shortest_path_igraph (med path = TRUE) brukes til. funksjonen shortest_path_cppRouting kan man legge inn vektorer med flere noder både argumentene “from_node” og “to_node.” Det betyr dersom man legger inn 2 noder “from_node” og 4 noder “to_node” beregnes den korteste kjøreavstanden fra begge startnodene til alle de fire stoppnodene. Resultatet blir et objekt med 8 rader. Om man kun er interessert den korteste kjøreavstanden fra hver av startnodene til én av stoppnodene legger man inn arumentet dist = “min funksjonen. Om man derimot vil ha hvilken av stoppnodene som har lengst kjøreavstand per startnode settes dist =”max”. å beregne korteste kjøretid minutter med shortest_path_cppRouting settes graph_cppRouting = graph_cppRouting_FT_MINUTES, mens graph_cppRouting = graph_cppRouting_LENGTH beregner korteste kjøreavstand meter. Objektet/objektene graph_cppRouting_FT_MINUTES/graph_cppRouting_LENGTH må være lastet inn (gjøres med funksjonen vegnett_to_R) før shortest_path_cppRouting kan kjøres.","code":"avstand_cpp_min <- GISSB::shortest_path_cppRouting(from_node$from_node,                                        to_node$to_node,                                        unit = \"FT_MINUTES\")  avstand_cpp_min #>   from_node to_node   length #> 1     26956  210373 85.92498  avstand_cpp_meter <- GISSB::shortest_path_cppRouting(from_node$from_node,                                        to_node$to_node,                                        unit = \"LENGTH\")  avstand_cpp_meter #>   from_node to_node   length #> 1     26956  210373 94643.92"},{"path":"/articles/GISSB_vignette.html","id":"eksempel","dir":"Articles","previous_headings":"","what":"Eksempel","title":"GISSB - Network analysis in R","text":"dette eksempelet…","code":"adresser <- c(\"Sykehusveien 25\",               \"Sognsvannsveien 20\",               \"Kirkeveien 166\",               \"Parkvegen 35\",               \"Kirkevegen 31\",               \"Sjukehusveien 9\",               \"Sogneprest Munthe-Kaas vei 100\")  postnummere <- c(\"1474\",               \"0372\",               \"0450\",               \"2212\",               \"2413\",               \"2500\",               \"1346\")  til <- GISSB::address_to_coord(zip_code = postnummere,                          address = adresser) %>%   GISSB::coords_to_google() to_node <- GISSB::coords_to_node(coords = til, direction = \"to\", membership = F)  fra <- GISSB::address_to_coord(zip_code = c(\"0177\", \"2211\"),                          address = c(\"Akersveien 26\", \"Otervegen 23\")) %>%   GISSB::coords_to_google() from_node <- GISSB::coords_to_node(coords = fra, direction = \"from\", membership = T)  avstand_cpp <- GISSB::shortest_path_cppRouting(unique(from_node$from_node),                                        unique(to_node$to_node),                                        unit = \"FT_MINUTES\") avstand_cpp #>    from_node to_node     length #> 1      26956   39305  18.754156 #> 2     210373   39305  75.981193 #> 3      26956  239705  10.219728 #> 4     210373  239705  86.401119 #> 5      26956   26943   5.109693 #> 6     210373   26943  85.498371 #> 7      26956   41093  82.570851 #> 8     210373   41093   6.076977 #> 9      26956  221362 106.664615 #> 10    210373  221362  95.472454 #> 11     26956  204669 271.642083 #> 12    210373  204669 268.844262 #> 13     26956  174136  19.048534 #> 14    210373  174136  99.296427  avstand_cpp_min <- GISSB::shortest_path_cppRouting(unique(from_node$from_node),                                        unique(to_node$to_node),                                        unit = \"FT_MINUTES\",                                        dist = \"min\") avstand_cpp_min #> # A tibble: 2 x 3 #> # Groups:   from_node [2] #>   from_node to_node length #>       <int>   <int>  <dbl> #> 1    210373   41093   6.08 #> 2     26956   26943   5.11  avstand_cpp_max <- GISSB::shortest_path_cppRouting(unique(from_node$from_node),                                        unique(to_node$to_node),                                        unit = \"FT_MINUTES\",                                        dist = \"max\") avstand_cpp_max #> # A tibble: 2 x 3 #> # Groups:   from_node [2] #>   from_node to_node length #>       <int>   <int>  <dbl> #> 1    210373  204669   269. #> 2     26956  204669   272."},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Sindre Mikael Haugen. Maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Haugen SM (2022). GISSB: GISSB - Network analysis R. https://statisticsnorway.github.io/GISSB/, https://shiny-train-492d94f8.pages.github.io/.","code":"@Manual{,   title = {GISSB: GISSB - Network analysis in R},   author = {Sindre Mikael Haugen},   year = {2022},   note = {https://statisticsnorway.github.io/GISSB/, https://shiny-train-492d94f8.pages.github.io/}, }"},{"path":"/index.html","id":"gissb---nettverksanalyse-i-r","dir":"","previous_headings":"","what":"GISSB - Network analysis in R","title":"GISSB - Network analysis in R","text":"GISSB er en pakke som inneholder GIS-funksjoner R bruk SSB. Se vignetten en introduksjon hvordan funksjonene kan brukes til å gjennomføre nettverksanalyser R: https://statisticsnorway.github.io/GISSB/articles/GISSB_vignette.html","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"GISSB - Network analysis in R","text":"can install development version GISSB like :","code":"devtools::install_github(\"statisticsnorway/GISSB\")"},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 GISSB authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/reference/address_to_coord.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert addresses to coordinates — address_to_coord","title":"Convert addresses to coordinates — address_to_coord","text":"Function find coordinates Norwegian Mapping Authority’s Cadastre (Norwegian: Matrikkelen, Norges eiendomsregister) address API.","code":""},{"path":"/reference/address_to_coord.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert addresses to coordinates — address_to_coord","text":"","code":"address_to_coord(zip_code, address, format = \"sf\", crs_out = 25833)"},{"path":"/reference/address_to_coord.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert addresses to coordinates — address_to_coord","text":"zip_code Character vector zip codes. address Character vector addresses (street name house number available) format Format returned data. Default value set “sf” (returns sf object). also possible set format “tibble” “data.frame”. crs_out Numeric vector chosen coordinate reference system (CRS). Default value set CRS 25833.","code":""},{"path":"/reference/address_to_coord.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert addresses to coordinates — address_to_coord","text":"Object coordinates specified addresses.","code":""},{"path":"/reference/address_to_coord.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert addresses to coordinates — address_to_coord","text":"","code":"if (FALSE) { from <- address_to_coord(zip_code = \"0177\",                         address = \"Akersveien 26\")                         }"},{"path":"/reference/adresse_api_koord.html","id":null,"dir":"Reference","previous_headings":"","what":"Adresser til koordinater — adresse_api_koord","title":"Adresser til koordinater — adresse_api_koord","text":"Funksjon å finne koordinater fra matrikkelen (adresse-API fra Kartverket).","code":""},{"path":"/reference/adresse_api_koord.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adresser til koordinater — adresse_api_koord","text":"","code":"adresse_api_koord(postnummer, adresse, format = \"sf\", crs = 25833)"},{"path":"/reference/adresse_api_koord.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adresser til koordinater — adresse_api_koord","text":"postnummer Karaktervektor med postnummer. adresse Karaktervektor med gateadresse (og gatenummer hvis tilgjengelig). format Format på datasettet som returneres. Default er satt til \"sf\" (sf-objekt), men det er også mulig å sette format = \"tibble\" eller \"data.frame\". crs Numerisk vektor med ønsket koordinatsystem koordinatene. Default er satt til CRS 25833.","code":""},{"path":"/reference/adresse_api_koord.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adresser til koordinater — adresse_api_koord","text":"Objekt med koordinatene til adressene.","code":""},{"path":"/reference/adresse_api_koord.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adresser til koordinater — adresse_api_koord","text":"","code":"fra <- adresse_api_koord(postnummer = \"0177\",                         adresse = \"Akersveien 26\")"},{"path":"/reference/beregne_avstand.html","id":null,"dir":"Reference","previous_headings":"","what":"Beregne korteste kjøreavstand (igraph) — beregne_avstand","title":"Beregne korteste kjøreavstand (igraph) — beregne_avstand","text":"Funksjon å beregne korteste kjøreavstand (minutter eller meter) mellom noder vegnettet. Funksjonen kan også returnere nodelenken (path) som den korteste kjøreruten består av. å bruke funksjonen må vegnettet ha blitt lastet inn og omgjort til et tbl_graph-objekt som heter \"graph\". Dette gjøres med funksjonen vegnett_to_R.","code":""},{"path":"/reference/beregne_avstand.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Beregne korteste kjøreavstand (igraph) — beregne_avstand","text":"","code":"beregne_avstand(from_node, to_node, enhet = \"FT_MINUTES\", path = F)"},{"path":"/reference/beregne_avstand.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Beregne korteste kjøreavstand (igraph) — beregne_avstand","text":"from_node Numerisk verdi med node-ID (en vektor med flere node-ID-er, se funksjonen beregne_avstand_cpp). to_node Numerisk verdi med node-ID (en vektor med flere node-ID-er, se funksjonen beregne_avstand_cpp). enhet Karaktervektor med \"FT_MINUTES\" å få korteste kjørerute målt minutter eller \"LENGTH\" korteste kjørerute målt meter. path Boolsk. Dersom path = TRUE returneres nodelenken som den korteste kjøreruten består av.","code":""},{"path":"/reference/beregne_avstand.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Beregne korteste kjøreavstand (igraph) — beregne_avstand","text":"Vektor med korteste kjørerute minutter eller meter. Dersom path = T returneres nodelenken som den korteste kjøreruten består av.","code":""},{"path":"/reference/beregne_avstand.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Beregne korteste kjøreavstand (igraph) — beregne_avstand","text":"","code":"avstand_min <- beregne_avstand(from_node = 26956,                                to_node = 210373,                                enhet = \"FT_MINUTES\") #> Error in igraph::shortest_paths(graph = graph, from = from_node, to = to_node,     output = \"both\", weights = graph %>% tidygraph::activate(edges) %>%         pull(!!as.name(enhet))): object 'graph' not found  avstand_meter <- beregne_avstand(from_node = 26956,                                  to_node = 210373,                                  enhet = \"LENGTH\") #> Error in igraph::shortest_paths(graph = graph, from = from_node, to = to_node,     output = \"both\", weights = graph %>% tidygraph::activate(edges) %>%         pull(!!as.name(enhet))): object 'graph' not found  path <- beregne_avstand(from_node = 26956,                         to_node = 210373,                         enhet = \"FT_MINUTES\",                         path = T) #> Error in igraph::shortest_paths(graph = graph, from = from_node, to = to_node,     output = \"both\", weights = graph %>% tidygraph::activate(edges) %>%         pull(!!as.name(enhet))): object 'graph' not found"},{"path":"/reference/beregne_avstand_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Beregne korteste kjøreavstand (cppRouting) — beregne_avstand_cpp","title":"Beregne korteste kjøreavstand (cppRouting) — beregne_avstand_cpp","text":"Funksjon å beregne korteste kjøreavstand (minutter eller meter) mellom eller flere noder vegnettet. Fungerer også med vektorer med flere adresser start_node og/eller to_node. å bruke funksjonen må vegnettet ha blitt lastet inn og omgjort til et cppRouting-objekt som heter \"graph_cppRouting_FT_MINUTES\" eller \"graph_cppRouting_LENGTH\". Dette gjøres med funksjonen vegnett_to_R.","code":""},{"path":"/reference/beregne_avstand_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Beregne korteste kjøreavstand (cppRouting) — beregne_avstand_cpp","text":"","code":"beregne_avstand_cpp(   from_node_ID,   to_node_ID,   enhet = \"FT_MINUTES\",   dist = \"all\" )"},{"path":"/reference/beregne_avstand_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Beregne korteste kjøreavstand (cppRouting) — beregne_avstand_cpp","text":"from_node_ID Numerisk vektor med én eller flere node-ID-er. to_node_ID Numerisk vektor med én eller flere node-ID-er. enhet Karaktervektor med \"FT_MINUTES\" å få korteste kjørerute målt minutter eller \"LENGTH\" korteste kjørerute målt meter. dist Karaktervektor som angir om man ønsker alle kjørerutene per from_node. Dersom man kun ønsker det korteste kjøreruten per from_node angir man dist = \"min\". \"max\" angir den lengste kjøreruten per from_node.","code":""},{"path":"/reference/beregne_avstand_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Beregne korteste kjøreavstand (cppRouting) — beregne_avstand_cpp","text":"Objekt (data.frame) med hvor mange minutter eller meter kjøreavstand det er mellom de angitte fra- og tilpunktene.","code":""},{"path":"/reference/beregne_avstand_cpp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Beregne korteste kjøreavstand (cppRouting) — beregne_avstand_cpp","text":"","code":"avstand_cpp_min <- beregne_avstand_cpp(26956,                                        210373,                                        enhet = \"FT_MINUTES\") #> Error in beregne_avstand_cpp(26956, 210373, enhet = \"FT_MINUTES\"): object 'graph_cppRouting_FT_MINUTES' not found  avstand_cpp_meter <- beregne_avstand_cpp(26956,                                          210373,                                          enhet = \"LENGTH\") #> Error in beregne_avstand_cpp(26956, 210373, enhet = \"LENGTH\"): object 'graph_cppRouting_LENGTH' not found"},{"path":"/reference/coords_to_google.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert coordinates to Google Maps — coords_to_google","title":"Convert coordinates to Google Maps — coords_to_google","text":"Function convert coordinates sf object format easy copy paste Google Maps.","code":""},{"path":"/reference/coords_to_google.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert coordinates to Google Maps — coords_to_google","text":"","code":"coords_to_google(coords, crs_out = 25833)"},{"path":"/reference/coords_to_google.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert coordinates to Google Maps — coords_to_google","text":"coords sf object geometry column converted CRS 4326. crs_out Chosen coordinate reference system (CRS) geometry column returned sf object.","code":""},{"path":"/reference/coords_to_google.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert coordinates to Google Maps — coords_to_google","text":"sf object new column added (coords_google).","code":""},{"path":"/reference/coords_to_google.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert coordinates to Google Maps — coords_to_google","text":"","code":"from <- address_to_coord(zip_code = \"0177\",                          address = \"Akersveien 26\") %>%   coords_to_google()"},{"path":"/reference/coords_to_node.html","id":null,"dir":"Reference","previous_headings":"","what":"Connect coordinates to the nearest nodes in the road network — coords_to_node","title":"Connect coordinates to the nearest nodes in the road network — coords_to_node","text":"Function find nearest points (nodes) road network chosen coordinates.","code":""},{"path":"/reference/coords_to_node.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Connect coordinates to the nearest nodes in the road network — coords_to_node","text":"","code":"coords_to_node(   coords,   direction = \"from\",   ID_col = \"ID\",   crs_out = 25833,   knn = 1,   membership = F )"},{"path":"/reference/coords_to_node.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Connect coordinates to the nearest nodes in the road network — coords_to_node","text":"coords sf object coordinates connected road network. direction Character vector “” points nodes “” points nodes. ID_col Character vector name ID column. Default value set “ID”. crs_out Numeric vector chosen coordinate reference system (CRS). knn Numeric vector chosen number nodes returned coordinates. knn = 1 nearest nodes chosen coordinates returned. knn = 2 two nearest nodes returned etc. membership Logical. TRUE search nodes limited nodes belong road network connected either nodes (possible either ). E.g. want search nodes belong road network nodes, membership set FALSE search nodes membership = TRUE nodes (order).","code":""},{"path":"/reference/coords_to_node.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Connect coordinates to the nearest nodes in the road network — coords_to_node","text":"object (data.frame) following columns; from_node/to_node, membership, coords_google_from_node/coords_google_to_node, knn, ID.","code":""},{"path":"/reference/coords_to_node.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Connect coordinates to the nearest nodes in the road network — coords_to_node","text":"function can used, nodes road network must converted sf object called \"nodes”. can done function `vegnett_to_R`.","code":""},{"path":"/reference/coords_to_node.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Connect coordinates to the nearest nodes in the road network — coords_to_node","text":"","code":"from <- address_to_coord(zip_code = \"0177\",                          address = \"Akersveien 26\") from_node <- coords_to_node(coords = from, direction = \"from\") #> Error in dplyr::filter(., nodeID %in% unique(edges$from)): object 'nodes' not found  to <- address_to_coord(zip_code = \"2211\",                          address = \"Otervegen 23\") to_node <- coords_to_node(coords = to, direction = \"to\") #> Error in dplyr::filter(., nodeID %in% unique(edges$to)): object 'nodes' not found"},{"path":"/reference/koords_to_google.html","id":null,"dir":"Reference","previous_headings":"","what":"Koordinater til Google Maps — koords_to_google","title":"Koordinater til Google Maps — koords_to_google","text":"Funksjon å omgjøre koordinater til et format som er enkelt å klippe og lime inn Google Maps.","code":""},{"path":"/reference/koords_to_google.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Koordinater til Google Maps — koords_to_google","text":"","code":"koords_to_google(koords, crs_out = 25833)"},{"path":"/reference/koords_to_google.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Koordinater til Google Maps — koords_to_google","text":"koords sf-objekt med en geometrikolonne som skal omgjøres til CRS 4326 crs_out Ønsket koordinatsystem (CRS) geometrikolonnen til sf-objektet som returneres","code":""},{"path":"/reference/koords_to_google.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Koordinater til Google Maps — koords_to_google","text":"sf-objekt med en ny kolonne lagt til (coords_google)","code":""},{"path":"/reference/koords_to_google.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Koordinater til Google Maps — koords_to_google","text":"","code":"fra <- adresse_api_koord(postnummer = \"0177\",                          adresse = \"Akersveien 26\") %>%   koords_to_google()"},{"path":"/reference/node_koord.html","id":null,"dir":"Reference","previous_headings":"","what":"Knytte koordinater til noder i vegnettet — node_koord","title":"Knytte koordinater til noder i vegnettet — node_koord","text":"Funksjon å finne nærmeste punkter (noder) vegnettet til angitte koordinater.","code":""},{"path":"/reference/node_koord.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Knytte koordinater til noder i vegnettet — node_koord","text":"","code":"node_koord(   koords,   fra_til = \"fra\",   ID_col = \"ID\",   crs_out = 25833,   knn = 1,   membership = F )"},{"path":"/reference/node_koord.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Knytte koordinater til noder i vegnettet — node_koord","text":"koords sf-objekt med koordinatene man ønsker å plassere på vegnettet. fra_til Karaktervektor med \"fra\" dersom noden skal være et startpunkt eller \"til\" dersom noden skal være et stoppunkt. ID_col Karaktervektor med navnet på ID-kolonnen. crs_out Numerisk vektor ønsket koordinatsystem. knn Numerisk vektor med antall noder per som blir returnert per koordinat. Dersom knn = 1 returneres den nærmeste noden til kooordinatene, dersom knn = 2 returneres de nærmeste nodene til koordinatene osv. membership Boolsk. Dersom TRUE begrenses søket etter noder til å kun gjelde noder som tilhører et tilknyttet vegnettverk til fra- eller tilpunktet (kun mulig enten fra eller til).","code":""},{"path":"/reference/node_koord.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Knytte koordinater til noder i vegnettet — node_koord","text":"Objekt (data.frame) med kolonnene from_node/to_node, membership, coords_google_from_node/coords_google_to_node, nabor og ID","code":""},{"path":"/reference/node_koord.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Knytte koordinater til noder i vegnettet — node_koord","text":"","code":"fra <- adresse_api_koord(postnummer = \"0177\",                          adresse = \"Akersveien 26\") from_node <- node_koord(koords = fra, fra_til = \"fra\") #> Error in dplyr::filter(., nodeID %in% unique(edges$from)): object 'nodes' not found  til <- adresse_api_koord(postnummer = \"2211\",                          adresse = \"Otervegen 23\") to_node <- node_koord(koords = til, fra_til = \"til\") #> Error in dplyr::filter(., nodeID %in% unique(edges$to)): object 'nodes' not found"},{"path":"/reference/path_leaflet.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize the shortest path with Leaflet — path_leaflet","title":"Visualize the shortest path with Leaflet — path_leaflet","text":"function path_leaflet visualizes shortest path (minutes meters) calculated function `shortest_path_igraph` (path = TRUE). Internet connection required load map tiles.","code":""},{"path":"/reference/path_leaflet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize the shortest path with Leaflet — path_leaflet","text":"","code":"path_leaflet(path)"},{"path":"/reference/path_leaflet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize the shortest path with Leaflet — path_leaflet","text":"path Object (list) created function `shortest_path_igraph` (path = TRUE).","code":""},{"path":"/reference/path_leaflet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize the shortest path with Leaflet — path_leaflet","text":"Interactive Leaflet map shows shortest path (minutes meters) chosen node road network.","code":""},{"path":"/reference/path_leaflet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize the shortest path with Leaflet — path_leaflet","text":"","code":"path_leaflet(path) #> Error in \"igraph\" %in% class(graph): object 'graph' not found"},{"path":"/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling `rhs(lhs)`.","code":""},{"path":"/reference/shortest_path_cppRouting.html","id":null,"dir":"Reference","previous_headings":"","what":"Shortest path (cppRouting) — shortest_path_cppRouting","title":"Shortest path (cppRouting) — shortest_path_cppRouting","text":"Function calculate shortest path (either minutes meters) two nodes Norwegian road network. function also works vectors multiple node ID’s. function can used, road network must converted cppRouting object called “graph_cppRouting_FT_MINUTES” “graph_cppRouting_LENGTH”. can done function `vegnett_to_R `.","code":""},{"path":"/reference/shortest_path_cppRouting.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shortest path (cppRouting) — shortest_path_cppRouting","text":"","code":"shortest_path_cppRouting(   from_node_ID,   to_node_ID,   unit = \"FT_MINUTES\",   dist = \"all\" )"},{"path":"/reference/shortest_path_cppRouting.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shortest path (cppRouting) — shortest_path_cppRouting","text":"from_node_ID Numeric vector one node ID’s. to_node_ID Numeric vector one node ID’s. unit Character vector \"FT_MINUTES\" calculate shortest path minutes \"LENGTH\" shortest path meters. dist Character vector specifies shortest paths supplied nodes returned, minimum/maximum value per node ID returned.","code":""},{"path":"/reference/shortest_path_cppRouting.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shortest path (cppRouting) — shortest_path_cppRouting","text":"Object (data.frame) many minutes meters shortest path supplied node ID’s.","code":""},{"path":"/reference/shortest_path_cppRouting.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shortest path (cppRouting) — shortest_path_cppRouting","text":"","code":"avstand_cpp_min <- shortest_path_cppRouting(26956,                                        210373,                                        unit = \"FT_MINUTES\") #> Error in shortest_path_cppRouting(26956, 210373, unit = \"FT_MINUTES\"): object 'graph_cppRouting_FT_MINUTES' not found  avstand_cpp_meter <- shortest_path_cppRouting(26956,                                          210373,                                          unit = \"LENGTH\") #> Error in shortest_path_cppRouting(26956, 210373, unit = \"LENGTH\"): object 'graph_cppRouting_LENGTH' not found"},{"path":"/reference/shortest_path_igraph.html","id":null,"dir":"Reference","previous_headings":"","what":"Shortest path (igraph) — shortest_path_igraph","title":"Shortest path (igraph) — shortest_path_igraph","text":"Function calculate shortest path (either minutes meters) nodes Norwegian road network. function can also return node link (path) shortest path consists .","code":""},{"path":"/reference/shortest_path_igraph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shortest path (igraph) — shortest_path_igraph","text":"","code":"shortest_path_igraph(from_node_ID, to_node_ID, unit = \"FT_MINUTES\", path = F)"},{"path":"/reference/shortest_path_igraph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shortest path (igraph) — shortest_path_igraph","text":"from_node_ID Numeric value node ID (multiple node ID’s used, see function `shortest_path_cppRouting`). to_node_ID Numeric value node ID (multiple node ID’s used, see function `shortest_path_cppRouting`). unit Character vector \"FT_MINUTES\" calculate shortest path minutes \"LENGTH\" shortest path meters. path Logical. TRUE node link shortest path returned.","code":""},{"path":"/reference/shortest_path_igraph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shortest path (igraph) — shortest_path_igraph","text":"Vector shortest path minutes meters. path = TRUE node link shortest path consists returned.","code":""},{"path":"/reference/shortest_path_igraph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Shortest path (igraph) — shortest_path_igraph","text":"function can used, road network must converted tbl_graph object called “graph”. can done function `vegnett_to_R `.","code":""},{"path":"/reference/shortest_path_igraph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shortest path (igraph) — shortest_path_igraph","text":"","code":"distance_min <- shortest_path_igraph(from_node_ID = 26956,                                to_node_ID = 210373,                                unit = \"FT_MINUTES\") #> Error in igraph::shortest_paths(graph = graph, from = from_node_ID, to = to_node_ID,     output = \"both\", weights = graph %>% tidygraph::activate(edges) %>%         pull(!!as.name(unit))): object 'graph' not found  distance_meter <- shortest_path_igraph(from_node_ID = 26956,                                  to_node_ID = 210373,                                  unit = \"LENGTH\") #> Error in igraph::shortest_paths(graph = graph, from = from_node_ID, to = to_node_ID,     output = \"both\", weights = graph %>% tidygraph::activate(edges) %>%         pull(!!as.name(unit))): object 'graph' not found  path <- shortest_path_igraph(from_node_ID = 26956,                         to_node_ID = 210373,                         unit = \"FT_MINUTES\",                         path = T) #> Error in igraph::shortest_paths(graph = graph, from = from_node_ID, to = to_node_ID,     output = \"both\", weights = graph %>% tidygraph::activate(edges) %>%         pull(!!as.name(unit))): object 'graph' not found"},{"path":"/reference/vegnett_to_R.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert the Norwegian road network into network graphs in R — vegnett_to_R","title":"Convert the Norwegian road network into network graphs in R — vegnett_to_R","text":"Function convert Norwegian road network, downloaded Nasjonal vegdatabank (NVDB), formats allows network analysis R (tbl_graph cppRouting).","code":""},{"path":"/reference/vegnett_to_R.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert the Norwegian road network into network graphs in R — vegnett_to_R","text":"","code":"vegnett_to_R(vegnett, crs_out = 25833)"},{"path":"/reference/vegnett_to_R.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert the Norwegian road network into network graphs in R — vegnett_to_R","text":"vegnett road network sf object. crs_out Numeric vector chosen coordinate reference system (CRS).","code":""},{"path":"/reference/vegnett_to_R.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert the Norwegian road network into network graphs in R — vegnett_to_R","text":"List containing following elements: [1] graph: road network structured tidy graph (tbl_graph object) [2] nodes: road network's nodes (sf object) [3] edges: road network's node links (data.frame) [4] graph_cppRouting_FT_MINUTES: road network structured cppRouting graph cost travel minutes (cppRouting object) [5] graph_cppRouting_LENGTH: road network structured cppRouting graph cost travel meters (cppRouting object)","code":""},{"path":"/reference/vegnett_to_R.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert the Norwegian road network into network graphs in R — vegnett_to_R","text":"","code":"vegnett_list <- vegnett_to_R(vegnett = vegnett) #> Error in sf::st_zm(., drop = T): object 'vegnett' not found  graph <- vegnett_list[[1]] #> Error in eval(expr, envir, enclos): object 'vegnett_list' not found nodes <- vegnett_list[[2]] #> Error in eval(expr, envir, enclos): object 'vegnett_list' not found edges <- vegnett_list[[3]] #> Error in eval(expr, envir, enclos): object 'vegnett_list' not found graph_cppRouting_FT_MINUTES <- vegnett_list[[4]] #> Error in eval(expr, envir, enclos): object 'vegnett_list' not found graph_cppRouting_LENGTH <- vegnett_list[[5]] #> Error in eval(expr, envir, enclos): object 'vegnett_list' not found"}]
