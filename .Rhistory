sf::write_sf(test, "C:/Users/rdn/Documents/Kart/isochrones_Kristiansund/vegnett_isochrones_5_200.shp")
library(tidyverse)
Sys.setlocale("LC_ALL","no_NB.utf8")
filsti <- "C:/Users/rdn/Documents/Kart/isochrones_Kristiansund/isochrones_isochrones_from_5_200_isochrones_from_5_200.parquet"
ds <- arrow::open_dataset(filsti)
test <- ds %>%
sfarrow::read_sf_dataset()
sf::write_sf(test, "C:/Users/rdn/Documents/Kart/isochrones_Kristiansund/isochrones_from_5_200.shp")
View(test)
colnames(test)
unique(test$Fødeinstitusjon)
#
test_1 <- test %>%
dplyr::filter(Fødeinstitusjon == "Kristiansund sjukehus",
minutes == 3) %>%
sf::st_transform(crs = 4326)
#
test_1 <- test %>%
dplyr::filter(Fødeinstitusjon == "Kristiansund sjukehus",
isochrone == 3) %>%
sf::st_transform(crs = 4326)
leaflet::leaflet(test_1) %>%
leaflet::addTiles() %>%
leaflet::addPolylines()
ggplot() +
geom_sf(data = test_1)
#
test_1 <- test %>%
dplyr::filter(Fødeinstitusjon == "Kristiansund sjukehus",
isochrone == 5) %>%
sf::st_transform(crs = 4326)
leaflet::leaflet(test_1) %>%
leaflet::addTiles() %>%
leaflet::addPolylines()
ggplot() +
geom_sf(data = test_1)
#
test_1 <- test %>%
dplyr::filter(Fødeinstitusjon == "Kristiansund sjukehus",
isochrone == 10) %>%
sf::st_transform(crs = 4326)
ggplot() +
geom_sf(data = test_1)
# install.packages("tidygeocoder")
library(tidygeocoder)
library(tibble)
library(dplyr)
address_components <- tribble(
~street, ~zip, ~country,
"Trondheimsveien 99", "0565", "Norway"
)
test <- address_components %>%
tidygeocoder::geocode(street = street,
postalcode = zip,
country = country)
View(test)
library(tidyverse)
source("C:/Users/rdn/Documents/Github/GISSB/R/address_to_coords.R", encoding = "UTF-8")
setwd("C:/")
ambu <- readxl::read_excel("C:/Users/rdn/Documents/Kart/Ambu_stasjon_offentlige.xlsx") %>%
filter(!is.na(`F Adresse1`))
ambu <- readxl::read_excel("C:/Users/rdn/Documents/Kart/Ambu_stasjon_offentlige.xlsx") %>%
filter(!is.na(`F Adresse1`))
postnummere <- ambu$`F Postnr`
adresser <- ambu$`F Adresse1`
fra <- address_to_coords(zip_code = postnummere,
address = adresser)
source("C:/Users/rdn/Documents/Github/GISSB/R/address_to_coords.R", encoding = "UTF-8")
source("C:/Users/rdn/Documents/Github/GISSB/R/address_to_coords.R")
ambu <- readxl::read_excel("C:/Users/rdn/Documents/Kart/Ambu_stasjon_offentlige.xlsx") %>%
filter(!is.na(`F Adresse1`))
postnummere <- ambu$`F Postnr`
adresser <- ambu$`F Adresse1`
fra <- address_to_coords(zip_code = postnummere,
address = adresser)
fra <- cbind(fra, ambu)
problemadresser <- fra %>%
filter(is.na(lat))
View(problemadresser)
address_components <- tribble(
~street, ~zip, ~country,
"Trondheimsveien 99", "0565", "Norway",
"Vefsenfeien 25-27", "8661", "Norway"
)
test <- address_components %>%
tidygeocoder::geocode(street = street,
postalcode = zip,
country = country)
address_components <- tribble(
~street, ~zip, ~country,
"Trondheimsveien 99", "0565", "Norway",
"Smedplassen 2", "6230", "Norway"
)
test <- address_components %>%
tidygeocoder::geocode(street = street,
postalcode = zip,
country = country)
address_components <- tribble(
~street, ~zip, ~country,
"Trondheimsveien 99", "0565", "Norway",
"Smedplassvegen 2", "6230", "Norway"
)
test <- address_components %>%
tidygeocoder::geocode(street = street,
postalcode = zip,
country = country)
address_components <- tribble(
~street, ~zip, ~country,
"Trondheimsveien 99", "0565",
"Smedplassvegen 2", "6230",
"Torvmyrane 11", "6160"
) %>%
dplyr::mutate(country = "Norway")
test <- address_components %>%
tidygeocoder::geocode(street = street,
postalcode = zip,
country = country)
address_components <- tribble(
~street, ~zip, ~country,
"Trondheimsveien 99", "0565",
"Smedplassvegen 2", "6230",
"Torvmyrane 11", "6160"
) %>%
dplyr::mutate(country = "Norway")
address_components
address_components <- tribble(
~street, ~zip,
"Trondheimsveien 99", "0565",
"Smedplassvegen 2", "6230",
"Torvmyrane 11", "6160"
) %>%
dplyr::mutate(country = "Norway")
test <- address_components %>%
tidygeocoder::geocode(street = street,
postalcode = zip,
country = country)
problemadresser_2 <- problemadresser %>%
dplyr::select(address, zip_code)
problemadresser_2 <- problemadresser %>%
dplyr::select(address, zip_code) %>%
dplyr::mutate(country = "Norway")
test <- address_components %>%
tidygeocoder::geocode(street = address,
postalcode = zip_code,
country = country)
test <- problemadresser_2 %>%
tidygeocoder::geocode(street = address,
postalcode = zip_code,
country = country)
problemadresser_nye <- test %>%
dplyr::filter(is.na(lat))
View(problemadresser_nye)
View(problemadresser)
# install.packages("tidygeocoder")
library(tidygeocoder)
library(tibble)
library(dplyr)
problemadresser_2 <- problemadresser %>%
dplyr::select(address, zip_code) %>%
dplyr::mutate(country = "Norway")
'address_components <- tribble(
~street, ~zip,
"Trondheimsveien 99", "0565",
"Smedplassvegen 2", "6230",
"Torvmyrane 11", "6160"
) %>%
dplyr::mutate(country = "Norway")'
address_components <- tribble(
~street, ~zip,
"Trondheimsveien 99", "0565",
"Smedplassvegen 2", "6230",
"Torvmyrane 11", "6160"
) %>%
dplyr::mutate(country = "Norway")
View(address_components)
test <- problemadresser_2 %>%
tidygeocoder::geocode(street = address,
postalcode = zip_code,
country = country)
View(address_components)
test <- address_components %>%
tidygeocoder::geocode(street = address,
postalcode = zip_code,
country = country)
address_components <- tribble(
~address, ~zip_code,
"Trondheimsveien 99", "0565",
"Smedplassvegen 2", "6230",
"Torvmyrane 11", "6160"
) %>%
dplyr::mutate(country = "Norway")
test <- address_components %>%
tidygeocoder::geocode(street = address,
postalcode = zip_code,
country = country)
View(test)
library(tidyverse)
source("C:/Users/rdn/Documents/Github/GISSB/R/address_to_coords.R") # encoding = "UTF-8"
setwd("C:/")
ambu <- readxl::read_excel("C:/Users/rdn/Documents/Kart/Ambu_stasjon_offentlige.xlsx") %>%
filter(!is.na(`F Adresse1`))
postnummere <- ambu$`F Postnr`
adresser <- ambu$`F Adresse1`
fra <- address_to_coords(zip_code = postnummere,
address = adresser)
fra <- cbind(fra, ambu)
problemadresser <- fra %>%
filter(is.na(lat))
View(problemadresser)
problemadresser_2 <- problemadresser %>%
dplyr::select(address, zip_code) %>%
dplyr::mutate(country = "Norway")
test <- problemadresser_2 %>%
tidygeocoder::geocode(street = address,
postalcode = zip_code,
country = country)
problemadresser_nye <- test %>%
dplyr::filter(is.na(lat))
View(problemadresser_nye)
View(test)
# isochrones_Kristiansund_vegnett_isochrones_5_300_vegnett_isochrones_5_300
filsti <- "C:/Users/rdn/Documents/Kart/isochrones_Kristiansund/isochrones_Kristiansund_isochrones_to_5_300_isochrones_to_5_300.parquet"
ds <- arrow::open_dataset(filsti)
test <- ds %>%
sfarrow::read_sf_dataset()
library(tidyverse)
Sys.setlocale("LC_ALL","no_NB.utf8")
# isochrones_Kristiansund_vegnett_isochrones_5_300_vegnett_isochrones_5_300
filsti <- "C:/Users/rdn/Documents/Kart/isochrones_Kristiansund/isochrones_Kristiansund_isochrones_to_5_300_isochrones_to_5_300.parquet"
ds <- arrow::open_dataset(filsti)
test <- ds %>%
sfarrow::read_sf_dataset()
unique(test$Fødeinstitusjon)
ds <- arrow::open_dataset(filsti)
test <- ds %>%
dplyr::filter(c("Kristiansund sjukehus", "St. Olavs hospital", "Molde sjukehus")) %>%
sfarrow::read_sf_dataset()
ds <- arrow::open_dataset(filsti)
test <- ds %>%
dplyr::filter(Fødeinstitusjon %in% c("Kristiansund sjukehus", "St. Olavs hospital", "Molde sjukehus")) %>%
sfarrow::read_sf_dataset()
unique(test$Fødeinstitusjon)
#
test_1 <- test %>%
dplyr::filter(Fødeinstitusjon == "Kristiansund sjukehus",
isochrone == 10) %>%
sf::st_transform(crs = 4326)
leaflet::leaflet(test_1) %>%
leaflet::addTiles() %>%
leaflet::addPolylines()
ggplot() +
geom_sf(data = test_1)
#
test_1 <- test %>%
dplyr::filter(Fødeinstitusjon == "Kristiansund sjukehus",
isochrone == 250) %>%
sf::st_transform(crs = 4326)
ggplot() +
geom_sf(data = test_1)
sf::write_sf(test, "C:/Users/rdn/Documents/Kart/isochrones_Kristiansund/isochrones_5_300.shp")
# filsti <- "C:/Users/rdn/Documents/Kart/isochrones_Kristiansund/isochrones_Kristiansund_isochrones_to_5_300_isochrones_to_5_300.parquet"
filsti <- "C:/Users/rdn/Documents/Kart/isochrones_Kristiansund/isochrones_Kristiansund_vegnett_isochrones_5_300_vegnett_isochrones_5_300.parquet"
ds <- arrow::open_dataset(filsti)
test <- ds %>%
# dplyr::filter(Fødeinstitusjon %in% c("Kristiansund sjukehus", "St. Olavs hospital", "Molde sjukehus")) %>%
sfarrow::read_sf_dataset()
unique(test$Fødeinstitusjon)
# sf::write_sf(test, "C:/Users/rdn/Documents/Kart/isochrones_Kristiansund/isochrones_5_300.shp")
sf::write_sf(test, "C:/Users/rdn/Documents/Kart/isochrones_Kristiansund/isochrones_vegnett_5_300.shp")
#
test_1 <- test %>%
dplyr::filter(Fødeinstitusjon == "Kristiansund sjukehus",
isochrone == 15) %>%
sf::st_transform(crs = 4326)
leaflet::leaflet(test_1) %>%
leaflet::addTiles() %>%
leaflet::addPolylines()
#
test_1 <- test %>%
dplyr::filter(Fødeinstitusjon == "Kristiansund sjukehus",
isochrone == 5) %>%
sf::st_transform(crs = 4326)
#
test_1 <- test %>%
dplyr::filter(Fødeinstitusjon == "Kristiansund sjukehus",
isochrone == 5) %>%
sf::st_transform(crs = 4326)
leaflet::leaflet(test_1) %>%
leaflet::addTiles() %>%
leaflet::addPolylines()
#
test_1 <- test %>%
dplyr::filter(Fødeinstitusjon == "Kristiansund sjukehus",
isochrone == 10) %>%
sf::st_transform(crs = 4326)
leaflet::leaflet(test_1) %>%
leaflet::addTiles() %>%
leaflet::addPolylines()
#
test_1 <- test %>%
dplyr::filter(Fødeinstitusjon == "Kristiansund sjukehus",
isochrone == 5) %>%
sf::st_transform(crs = 4326)
leaflet::leaflet(test_1) %>%
leaflet::addTiles() %>%
leaflet::addPolylines()
#
test_1 <- test %>%
dplyr::filter(Fødeinstitusjon == "Kristiansund sjukehus",
isochrone == 15) %>%
sf::st_transform(crs = 4326)
leaflet::leaflet(test_1) %>%
leaflet::addTiles() %>%
leaflet::addPolylines()
if ((try(is.character(RCurl::getURL("https://ws.geonorge.no/adresser/v1/"))) == TRUE) == FALSE) {
print("No access to: https://ws.geonorge.no/adresser/v1/")
stop()
}
if ((try(is.character(RCurl::getURL("https://ws.geonorge.no/adresser/v1/"))) == TRUE) == FALSE) {
print("No access to: https://ws.geonorge.no/adresser/v1/")
stop()
}
if ((try(is.character(RCurl::getURL("https://ws.geonorge.no/adresser/v1/654654654654"))) == TRUE) == FALSE) {
print("No access to: https://ws.geonorge.no/adresser/v1/")
stop()
}
try(is.character(RCurl::getURL("https://ws.geonorge.no/adresser/v1/"))) == TRUE)
try(is.character(RCurl::getURL("https://ws.geonorge.no/adresser/v1/"))) == TRUE
try(is.character(RCurl::getURL("https://ws.geonorge.no/adresser/v1/")) == TRUE)
try((is.character(RCurl::getURL("https://ws.geonorge.no/adresser/v1/")) == TRUE) stop("No access to: https://ws.geonorge.no/adresser/v1/"))
try((is.character(RCurl::getURL("https://ws.geonorge.no/adresser/v1/")) == TRUE) stop("No access to: https://ws.geonorge.no/adresser/v1/"))
stop("No access to: https://ws.geonorge.no/adresser/v1/")
try((is.character(RCurl::getURL("https://ws.geonorge.no/adresser/v1/")) == TRUE) stop("No access to: https://ws.geonorge.no/adresser/v1/")
try(is.character(RCurl::getURL("https://ws.geonorge.no/adresser/v1/")) == TRUE stop("No access to: https://ws.geonorge.no/adresser/v1/"))
RCurl::getURL("https://ws.geonorge.no/adresser/v1/")
try(RCurl::getURL("https://ws.geonorge.no/adresser/v1/"))
try(RCurl::getURL("https://ws.geonorge.no/adresser/v1/"))
try(RCurl::getURL("https://ws.geonorge.no/adresser/v1/") stop("No access to: https://ws.geonorge.no/adresser/v1/"))
try(RCurl::getURL("https://ws.geonorge.no/adresser/v1/"), stop("No access to: https://ws.geonorge.no/adresser/v1/"))
try(is.character(RCurl::getURL("https://ws.geonorge.no/adresser/v1/")), stop("No access to: https://ws.geonorge.no/adresser/v1/"))
stopifnot(is.character(RCurl::getURL("https://ws.geonorge.no/adresser/v1/"))==TRUE)
stopifnot(is.character(RCurl::getURL("https://ws.geonorge.no/adresser/v1/"))==TRUE)
stopifnot(is.character(RCurl::getURL("https://ws.geonorge.no/adresser/v1/"))==FALSE)
(try(is.character(RCurl::getURL("https://ws.geonorge.no/adresser/v1/"))) == TRUE)
if (try(is.character(RCurl::getURL("https://ws.geonorge.no/adresser/v1/"))) == TRUE) {
print("No access to: https://ws.geonorge.no/adresser/v1/")
stop()
}
if (try(is.character(RCurl::getURL("https://ws.geonorge.no/adresser/v1/"))) == TRUE) {
print("No access to: https://ws.geonorge.no/adresser/v1/")
stop()
}
if ((try(is.character(RCurl::getURL("https://ws.geonorge.no/adresser/v1/"))) == TRUE) == FALSE) {
print("No access to: https://ws.geonorge.no/adresser/v1/")
stop()
}
if ((try(is.character(RCurl::getURL("https://ws.geonorge.no/adresser/v1/"))) == TRUE) == FALSE) {
print("No access to: https://ws.geonorge.no/adresser/v1/")
stop()
}
try(is.character(RCurl::getURL("https://ws.geonorge.no/adresser/v1/")))
if (try(is.character(RCurl::getURL("https://ws.geonorge.no/adresser/v1/"))) == TRUE) {
# print()
stop("No access to: https://ws.geonorge.no/adresser/v1/")
}
# Checking access to Geonorge #
if ((try(is.character(RCurl::getURL("https://ws.geonorge.no/adresser/v1/"))) == TRUE) == FALSE) {
# print("No access to: https://ws.geonorge.no/adresser/v1/")
stop("No access to: https://ws.geonorge.no/adresser/v1/")
}
# rm(list = c("beregne_avstand_cpp"))
devtools::document()
devtools::check()
# rm(list = c("beregne_avstand_cpp"))
devtools::document()
devtools::check()
?test_check
testthat::test_check("GISSB")
GISSB::vegnett_sampledata
?GISSB::shortest_path_igraph
?GISSB::vegnett_to_R
vegnett_list <- vegnett_to_R(vegnett = vegnett_sampledata,
year = 2021,
fromnodeID = "FROMNODEID",
tonodeID = "TONODEID",
FT_minutes = "FT_MINUTES",
TF_minutes = "TF_MINUTES",
meters = "SHAPE_LENGTH")
graph <- vegnett_list[[1]]
nodes <- vegnett_list[[2]]
edges <- vegnett_list[[3]]
graph_cppRouting_minutes <- vegnett_list[[4]]
graph_cppRouting_meters <- vegnett_list[[5]]
vegnett_sampledata
test <- vegnett_sampledata
View(test)
View(edges)
path <- shortest_path_igraph(from_node_ID = 25,
to_node_ID = 33,
unit = "minutes",
path = TRUE)
path_leaflet(path)
# rm(list = c("beregne_avstand_cpp"))
devtools::document()
devtools::check()
# rm(list = c("beregne_avstand_cpp"))
devtools::document()
devtools::check()
pkgdown::build_site()
vegnett_list <- vegnett_to_R(vegnett = vegnett_sampledata,
year = 2021,
fromnodeID = "FROMNODEID",
tonodeID = "TONODEID",
FT_minutes = "FT_MINUTES",
TF_minutes = "TF_MINUTES",
meters = "SHAPE_LENGTH")
library(GISSB)
vegnett_list <- vegnett_to_R(vegnett = vegnett_sampledata,
year = 2021,
fromnodeID = "FROMNODEID",
tonodeID = "TONODEID",
FT_minutes = "FT_MINUTES",
TF_minutes = "TF_MINUTES",
meters = "SHAPE_LENGTH")
graph <- vegnett_list[[1]]
nodes <- vegnett_list[[2]]
edges <- vegnett_list[[3]]
graph_cppRouting_minutes <- vegnett_list[[4]]
graph_cppRouting_meters <- vegnett_list[[5]]
from <- address_to_coords(zip_code = "0177",
address = "Akersveien 26")
from_node <- coords_to_node(coords = from, direction = "from")
to <- address_to_coords(zip_code = "2211",
address = "Otervegen 23")
to_node <- coords_to_node(coords = to, direction = "to")
from_node
to_node
devtools::use_data(graph, edges, nodes, graph_cppRouting_minutes, graph_cppRouting_meters, internal = TRUE)
devtools::use_data(graph, edges, nodes, graph_cppRouting_minutes, graph_cppRouting_meters, internal = TRUE)
usethis::use_data(graph, edges, nodes, graph_cppRouting_minutes, graph_cppRouting_meters, internal = TRUE)
load("C:/Users/rdn/Documents/Github/GISSB/R/sysdata.rda")
?usethis::use_data
vegnett_list <- vegnett_to_R(vegnett = vegnett_sampledata,
year = 2021,
fromnodeID = "FROMNODEID",
tonodeID = "TONODEID",
FT_minutes = "FT_MINUTES",
TF_minutes = "TF_MINUTES",
meters = "SHAPE_LENGTH")
graph <- vegnett_list[[1]]
nodes <- vegnett_list[[2]]
edges <- vegnett_list[[3]]
graph_cppRouting_minutes <- vegnett_list[[4]]
graph_cppRouting_meters <- vegnett_list[[5]]
usethis::use_data(graph, edges, nodes, graph_cppRouting_minutes, graph_cppRouting_meters)
# rm(list = c("beregne_avstand_cpp"))
devtools::document()
devtools::check()
# rm(list = c("beregne_avstand_cpp"))
devtools::document()
devtools::check()
# rm(list = c("beregne_avstand_cpp"))
devtools::document()
devtools::check()
pkgdown::build_site()
load("C:/Users/rdn/Documents/Github/GISSB/data/edges.rda")
# Installerer pakken lokalt #
devtools::install()
# Lag pakke (?)
devtools::build()
# Installerer pakken lokalt #
devtools::install()
pkgdown::build_site()
# rm(list = c("beregne_avstand_cpp"))
devtools::document()
devtools::load_all()
# rm(list = c("beregne_avstand_cpp"))
devtools::document()
usethis::use_r("nodes_sampledata")
# rm(list = c("beregne_avstand_cpp"))
devtools::document()
vegnett_list <- vegnett_to_R(vegnett = vegnett_sampledata,
year = 2021,
fromnodeID = "FROMNODEID",
tonodeID = "TONODEID",
FT_minutes = "FT_MINUTES",
TF_minutes = "TF_MINUTES",
meters = "SHAPE_LENGTH")
graph_sampledata <- vegnett_list[[1]]
nodes_sampledata <- vegnett_list[[2]]
edges_sampledata <- vegnett_list[[3]]
graph_cppRouting_minutes_sampledata <- vegnett_list[[4]]
graph_cppRouting_meters_sampledata <- vegnett_list[[5]]
usethis::use_data(graph_sampledata, nodes_sampledata, edges_sampledata, graph_cppRouting_minutes_sampledata, graph_cppRouting_meters_sampledata)
# rm(list = c("beregne_avstand_cpp"))
devtools::document()
devtools::check()
pkgdown::build_site()
# Installerer pakken lokalt #
devtools::install()
# Installerer pakken lokalt #
devtools::install()
pkgdown::build_site()
install.packages("htmltools")
install.packages("htmltools")
pkgdown::build_site()
# Lag pakke (?)
devtools::build()
nchar(0)
nchar(0)
nchar("16-24")
nchar(0)+nchar("16-24")+nchar(2019)+nchar(13.512203051)+nchar(4.0475260802)
