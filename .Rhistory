RCurl::getURL("https://ws.geonorge.no/adresser/v1/")
try(RCurl::getURL("https://ws.geonorge.no/adresser/v1/"))
try(RCurl::getURL("https://ws.geonorge.no/adresser/v1/"))
try(RCurl::getURL("https://ws.geonorge.no/adresser/v1/") stop("No access to: https://ws.geonorge.no/adresser/v1/"))
try(RCurl::getURL("https://ws.geonorge.no/adresser/v1/"), stop("No access to: https://ws.geonorge.no/adresser/v1/"))
try(is.character(RCurl::getURL("https://ws.geonorge.no/adresser/v1/")), stop("No access to: https://ws.geonorge.no/adresser/v1/"))
stopifnot(is.character(RCurl::getURL("https://ws.geonorge.no/adresser/v1/"))==TRUE)
stopifnot(is.character(RCurl::getURL("https://ws.geonorge.no/adresser/v1/"))==TRUE)
stopifnot(is.character(RCurl::getURL("https://ws.geonorge.no/adresser/v1/"))==FALSE)
(try(is.character(RCurl::getURL("https://ws.geonorge.no/adresser/v1/"))) == TRUE)
if (try(is.character(RCurl::getURL("https://ws.geonorge.no/adresser/v1/"))) == TRUE) {
print("No access to: https://ws.geonorge.no/adresser/v1/")
stop()
}
if (try(is.character(RCurl::getURL("https://ws.geonorge.no/adresser/v1/"))) == TRUE) {
print("No access to: https://ws.geonorge.no/adresser/v1/")
stop()
}
if ((try(is.character(RCurl::getURL("https://ws.geonorge.no/adresser/v1/"))) == TRUE) == FALSE) {
print("No access to: https://ws.geonorge.no/adresser/v1/")
stop()
}
if ((try(is.character(RCurl::getURL("https://ws.geonorge.no/adresser/v1/"))) == TRUE) == FALSE) {
print("No access to: https://ws.geonorge.no/adresser/v1/")
stop()
}
try(is.character(RCurl::getURL("https://ws.geonorge.no/adresser/v1/")))
if (try(is.character(RCurl::getURL("https://ws.geonorge.no/adresser/v1/"))) == TRUE) {
# print()
stop("No access to: https://ws.geonorge.no/adresser/v1/")
}
# Checking access to Geonorge #
if ((try(is.character(RCurl::getURL("https://ws.geonorge.no/adresser/v1/"))) == TRUE) == FALSE) {
# print("No access to: https://ws.geonorge.no/adresser/v1/")
stop("No access to: https://ws.geonorge.no/adresser/v1/")
}
# rm(list = c("beregne_avstand_cpp"))
devtools::document()
devtools::check()
# rm(list = c("beregne_avstand_cpp"))
devtools::document()
devtools::check()
?test_check
testthat::test_check("GISSB")
GISSB::vegnett_sampledata
?GISSB::shortest_path_igraph
?GISSB::vegnett_to_R
vegnett_list <- vegnett_to_R(vegnett = vegnett_sampledata,
year = 2021,
fromnodeID = "FROMNODEID",
tonodeID = "TONODEID",
FT_minutes = "FT_MINUTES",
TF_minutes = "TF_MINUTES",
meters = "SHAPE_LENGTH")
graph <- vegnett_list[[1]]
nodes <- vegnett_list[[2]]
edges <- vegnett_list[[3]]
graph_cppRouting_minutes <- vegnett_list[[4]]
graph_cppRouting_meters <- vegnett_list[[5]]
vegnett_sampledata
test <- vegnett_sampledata
View(test)
View(edges)
path <- shortest_path_igraph(from_node_ID = 25,
to_node_ID = 33,
unit = "minutes",
path = TRUE)
path_leaflet(path)
# rm(list = c("beregne_avstand_cpp"))
devtools::document()
devtools::check()
# rm(list = c("beregne_avstand_cpp"))
devtools::document()
devtools::check()
pkgdown::build_site()
vegnett_list <- vegnett_to_R(vegnett = vegnett_sampledata,
year = 2021,
fromnodeID = "FROMNODEID",
tonodeID = "TONODEID",
FT_minutes = "FT_MINUTES",
TF_minutes = "TF_MINUTES",
meters = "SHAPE_LENGTH")
library(GISSB)
vegnett_list <- vegnett_to_R(vegnett = vegnett_sampledata,
year = 2021,
fromnodeID = "FROMNODEID",
tonodeID = "TONODEID",
FT_minutes = "FT_MINUTES",
TF_minutes = "TF_MINUTES",
meters = "SHAPE_LENGTH")
graph <- vegnett_list[[1]]
nodes <- vegnett_list[[2]]
edges <- vegnett_list[[3]]
graph_cppRouting_minutes <- vegnett_list[[4]]
graph_cppRouting_meters <- vegnett_list[[5]]
from <- address_to_coords(zip_code = "0177",
address = "Akersveien 26")
from_node <- coords_to_node(coords = from, direction = "from")
to <- address_to_coords(zip_code = "2211",
address = "Otervegen 23")
to_node <- coords_to_node(coords = to, direction = "to")
from_node
to_node
devtools::use_data(graph, edges, nodes, graph_cppRouting_minutes, graph_cppRouting_meters, internal = TRUE)
devtools::use_data(graph, edges, nodes, graph_cppRouting_minutes, graph_cppRouting_meters, internal = TRUE)
usethis::use_data(graph, edges, nodes, graph_cppRouting_minutes, graph_cppRouting_meters, internal = TRUE)
load("C:/Users/rdn/Documents/Github/GISSB/R/sysdata.rda")
?usethis::use_data
vegnett_list <- vegnett_to_R(vegnett = vegnett_sampledata,
year = 2021,
fromnodeID = "FROMNODEID",
tonodeID = "TONODEID",
FT_minutes = "FT_MINUTES",
TF_minutes = "TF_MINUTES",
meters = "SHAPE_LENGTH")
graph <- vegnett_list[[1]]
nodes <- vegnett_list[[2]]
edges <- vegnett_list[[3]]
graph_cppRouting_minutes <- vegnett_list[[4]]
graph_cppRouting_meters <- vegnett_list[[5]]
usethis::use_data(graph, edges, nodes, graph_cppRouting_minutes, graph_cppRouting_meters)
# rm(list = c("beregne_avstand_cpp"))
devtools::document()
devtools::check()
# rm(list = c("beregne_avstand_cpp"))
devtools::document()
devtools::check()
# rm(list = c("beregne_avstand_cpp"))
devtools::document()
devtools::check()
pkgdown::build_site()
load("C:/Users/rdn/Documents/Github/GISSB/data/edges.rda")
# Installerer pakken lokalt #
devtools::install()
# Lag pakke (?)
devtools::build()
# Installerer pakken lokalt #
devtools::install()
pkgdown::build_site()
# rm(list = c("beregne_avstand_cpp"))
devtools::document()
devtools::load_all()
# rm(list = c("beregne_avstand_cpp"))
devtools::document()
usethis::use_r("nodes_sampledata")
# rm(list = c("beregne_avstand_cpp"))
devtools::document()
vegnett_list <- vegnett_to_R(vegnett = vegnett_sampledata,
year = 2021,
fromnodeID = "FROMNODEID",
tonodeID = "TONODEID",
FT_minutes = "FT_MINUTES",
TF_minutes = "TF_MINUTES",
meters = "SHAPE_LENGTH")
graph_sampledata <- vegnett_list[[1]]
nodes_sampledata <- vegnett_list[[2]]
edges_sampledata <- vegnett_list[[3]]
graph_cppRouting_minutes_sampledata <- vegnett_list[[4]]
graph_cppRouting_meters_sampledata <- vegnett_list[[5]]
usethis::use_data(graph_sampledata, nodes_sampledata, edges_sampledata, graph_cppRouting_minutes_sampledata, graph_cppRouting_meters_sampledata)
# rm(list = c("beregne_avstand_cpp"))
devtools::document()
devtools::check()
pkgdown::build_site()
# Installerer pakken lokalt #
devtools::install()
# Installerer pakken lokalt #
devtools::install()
pkgdown::build_site()
install.packages("htmltools")
install.packages("htmltools")
pkgdown::build_site()
# Lag pakke (?)
devtools::build()
nchar(0)
nchar(0)
nchar("16-24")
nchar(0)+nchar("16-24")+nchar(2019)+nchar(13.512203051)+nchar(4.0475260802)
suppressWarnings(RODBC::odbcConnect(
dsn = "DB1P",
uid = Sys.info()["user"],
pwd = getPass::getPass("DB1P passord:"),
DBMSencoding = "UTF-8"
))
library(cppRouting)
sessionInfo()
library(devtools)
library(usethis)
library(roxygen2)
library(testthat)
library(tidyverse)
devtools::check()
citation("cppRouting")
install.packages("cppRouting")
library(cppRouting)
sessionInfo()
library(devtools)
library(usethis)
library(roxygen2)
library(testthat)
library(tidyverse)
load(file='C:/Users/rdn/Documents/Github/GISSB/R/sysdata.rda')
# graph_cppRouting_minutes
edges_2 <- edges %>%
dplyr::select(from, to, minutes)
edges_2 %>%
filter(from == 25)
node_list_coord <- nodes %>%
dplyr::mutate(X = unlist(purrr::map(geometry,1)),
Y = unlist(purrr::map(geometry,2))) %>%
data.frame() %>%
dplyr::select(nodeID, X, Y)
# graph_cppRouting_minutes <- makegraph(edges_2, directed = TRUE) # aux = edges$minutes
graph_cppRouting_minutes_2 <- cppRouting::makegraph(edges_2, directed = TRUE, coords = node_list_coord)
graph_cppRouting_minutes_2
# meters
edges_meters <- edges %>%
dplyr::select(from, to, meters)
graph_cppRouting_meters <- cppRouting::makegraph(edges_meters, directed = TRUE, coords = node_list_coord)
devtools::check()
library(cppRouting)
sessionInfo()
load(file='C:/Users/rdn/Documents/Github/GISSB/R/sysdata.rda')
node_list_coord <- nodes %>%
dplyr::mutate(X = unlist(purrr::map(geometry,1)),
Y = unlist(purrr::map(geometry,2))) %>%
data.frame() %>%
dplyr::select(nodeID, X, Y)
# graph_cppRouting_minutes
edges_minutes <- edges %>%
dplyr::select(from, to, minutes)
graph_cppRouting_minutes <- cppRouting::makegraph(edges_minutes, directed = TRUE, coords = node_list_coord)
# meters
edges_meters <- edges %>%
dplyr::select(from, to, meters)
graph_cppRouting_meters <- cppRouting::makegraph(edges_meters, directed = TRUE, coords = node_list_coord)
graph_sampledata <- graph
nodes_sampledata <- nodes
edges_sampledata <- edges_sampledata
graph_cppRouting_minutes_sampledata <- graph_cppRouting_minutes
graph_cppRouting_meters_sampledata <- graph_cppRouting_meters
usethis::use_data(graph_sampledata, nodes_sampledata, edges_sampledata, graph_cppRouting_minutes_sampledata, graph_cppRouting_meters_sampledata)
usethis::use_data(graph_sampledata, nodes_sampledata, edges_sampledata, graph_cppRouting_minutes_sampledata, graph_cppRouting_meters_sampledata, overwrite = TRUE)
# rm(list = c("beregne_avstand_cpp"))
devtools::document()
devtools::check()
distance_min <- shortest_path_cppRouting(25,
33,
unit = "minutes",
graph_cppRouting_object = graph_cppRouting_minutes_sampledata)
distance_meter <- shortest_path_cppRouting(25,
33,
unit = "meters",
graph_cppRouting_object = graph_cppRouting_meters_sampledata)
distance_min
distance_meter
distance_meter <- shortest_path_cppRouting(25,
c(32, 33),
unit = "meters",
graph_cppRouting_object = graph_cppRouting_meters_sampledata)
distance_meter
distance_min <- shortest_path_cppRouting(from = 25,
to = 33,
unit = "minutes",
graph_cppRouting_object = graph_cppRouting_minutes_sampledata)
distance_meter <- shortest_path_cppRouting(from = 25,
to = c(32, 33),
unit = "meters",
graph_cppRouting_object = graph_cppRouting_meters_sampledata)
distance_min
distance_meter
shortest_path_cppRouting(from = 25,
to = 33,
unit = "minutes",
graph_cppRouting_object = graph_cppRouting_minutes_sampledata)
shortest_path_cppRouting(from = 25,
to = 33,
unit = "minutes",
graph_cppRouting_object = graph_cppRouting_minutes_sampledata)
shortest_path_cppRouting(from = 25,
to = 33,
unit = "meters",
graph_cppRouting_object = graph_cppRouting_meters_sampledata)
shortest_path_cppRouting(from = 25,
to = c(32, 33),
unit = "minutes",
dist = "min",
graph_cppRouting_object = graph_cppRouting_minutes_sampledata)
shortest_path_cppRouting(from = 25,
to = c(32, 33),
unit = "minutes",
dist = "max",
graph_cppRouting_object = graph_cppRouting_minutes_sampledata)
shortest_path_cppRouting(from = 25,
to = 33,
unit = "minutes",
graph_cppRouting_object = graph_cppRouting_minutes_sampledata)
# rm(list = c("beregne_avstand_cpp"))
devtools::document()
shortest_path_igraph(from_node_ID = 25,
to_node_ID = 33,
unit = "minutes",
graph_object = graph_sampledata)
shortest_path_igraph(from_node_ID = 25,
to_node_ID = 33,
unit = "meters",
graph_object = graph_sampledata)
shortest_path_igraph(from_node_ID = 25,
to_node_ID = 33,
unit = "minutes",
path = TRUE,
graph_object = graph_sampledata)
from <- address_to_coords(zip_code = "0177", address = "Akersveien 26")
from_node <- coords_to_node(coords = from, direction = "from", nodes_object = nodes_sampledata, edges_object = edges_sampledata)
to <- address_to_coords(zip_code = "2211", address = "Otervegen 23")
to_node <- coords_to_node(coords = to, direction = "to", nodes_object = nodes_sampledata, edges_object = edges_sampledata)
from_node
to_node
from_node
# Schweigaards gate 10, 0185 Oslo
from <- address_to_coords(zip_code = "0185", address = "Schweigaards gate 10")
from_node <- coords_to_node(coords = from, direction = "from", nodes_object = nodes_sampledata, edges_object = edges_sampledata)
from_node
shortest_path_igraph(from_node_ID = 25,
to_node_ID = 33,
unit = "minutes",
path = TRUE,
graph_object = graph_sampledata) %>%
path_leaflet()
# rm(list = c("beregne_avstand_cpp"))
devtools::document()
devtools::check()
# rm(list = c("beregne_avstand_cpp"))
devtools::document()
devtools::check()
pkgdown::build_site()
# Lag pakke (?)
devtools::build()
library(devtools)
library(usethis)
library(roxygen2)
library(testthat)
library(tidyverse)
# Lag pakke (?)
devtools::build()
devtools::check()
load("C:/Users/rdn/Documents/Github/GISSB/R/sysdata.rda")
load(file='C:/Users/rdn/Documents/Github/GISSB/R/nodes_sampladata.rda')
load(file='C:/Users/rdn/Documents/Github/GISSB/data/nodes_sampladata.rda')
load(file='C:/Users/rdn/Documents/Github/GISSB/data/nodes_sampledata.rda')
load(file='C:/Users/rdn/Documents/Github/GISSB/data/nodes_sampledata.rda')
View(nodes_sampledata)
load(file='C:/Users/rdn/Documents/Github/GISSB/data/nodes_sampledata.rda')
load(file='C:/Users/rdn/Documents/Github/GISSB/data/edges_sampledata.rda')
load(file='C:/Users/rdn/Documents/Github/GISSB/data/graph_cppRouting_meters_sampledata.rda')
load(file='C:/Users/rdn/Documents/Github/GISSB/data/graph_cppRouting_minutes_sampledata.rda')
load(file='C:/Users/rdn/Documents/Github/GISSB/data/graph_sampledata.rda')
load(file='C:/Users/rdn/Documents/Github/GISSB/data/vegnett_sampledata.rda')
Encoding(nodes_sampledata)
Encoding(nodes_sampledata$nodeID)
Encoding(nodes_sampledata$nodeID[1:3])
nodes_sampledata$nodeID[1:3]
nodes_sampledata$nodeID
View(nodes_sampledata)
nodes_sampledata
Encoding(nodes_sampledata$geometry)
stringi::stri_enc_toascii(nodes_sampledata)
stringi::stri_enc_toascii(nodes_sampledata$geometry)
nodes_sampledata
stringi::stri_escape_unicode(nodes_sampledata)
stringi::stri_escape_unicode(nodes_sampledata[1:3])
devtools::check()
devtools::use_data(nodes_sampledata, edges_sampledata, graph_cppRouting_meters_sampledata, graph_cppRouting_minutes_sampledata,
graph_sampledata, vegnett_sampledata, internal = TRUE, overwrite = TRUE)
usethis::use_data(nodes_sampledata, edges_sampledata, graph_cppRouting_meters_sampledata, graph_cppRouting_minutes_sampledata,
graph_sampledata, vegnett_sampledata, internal = TRUE, overwrite = TRUE)
# rm(list = c("beregne_avstand_cpp"))
devtools::document()
load("C:/Users/rdn/Documents/Github/GISSB/R/sysdata.rda")
load("C:/Users/rdn/Documents/Github/GISSB/R/sysdata.rda")
# rm(list = c("beregne_avstand_cpp"))
devtools::document()
devtools::check()
# rm(list = c("beregne_avstand_cpp"))
devtools::document()
# rm(list = c("beregne_avstand_cpp"))
devtools::document()
# rm(list = c("beregne_avstand_cpp"))
devtools::document()
devtools::check()
# rm(list = c("beregne_avstand_cpp"))
devtools::document()
# rm(list = c("beregne_avstand_cpp"))
devtools::document()
# rm(list = c("beregne_avstand_cpp"))
devtools::document()
# rm(list = c("beregne_avstand_cpp"))
devtools::document()
devtools::check()
# rm(list = c("beregne_avstand_cpp"))
devtools::document()
devtools::check()
# rm(list = c("beregne_avstand_cpp"))
devtools::document()
devtools::check()
# rm(list = c("beregne_avstand_cpp"))
devtools::document()
devtools::check()
# rm(list = c("beregne_avstand_cpp"))
devtools::document()
devtools::check()
st_crs(nodes_sampledata)$wkt
sf::st_crs(nodes_sampledata)$wkt
sf::st_crs(sf_data_crs_corrected)$wkt <- gsub("°|º", "\\\u00b0", sf::st_crs(nodes_sampledata)$wkt)
nodes_sampledata$wkt
sf::st_crs(nodes_sampledata)$wkt
stringi::stri_escape_unicode(sf::st_crs(nodes_sampledata)$wkt)
stringi::stri_unescape_unicode(sf::st_crs(nodes_sampledata)$wkt)
sf::st_crs(nodes_sampledata)
sf::st_crs(nodes_sampledata)$wkt <- gsub("°|º", "\\\u00b0", sf::st_crs(nodes_sampledata)$wkt)
sf::st_crs(nodes_sampledata)
sf::st_crs(nodes_sampledata)$wkt <- gsub("°|°", "\\\u00b0", sf::st_crs(nodes_sampledata)$wkt)
sf::st_crs(nodes_sampledata)
sf::st_crs(nodes_sampledata)
sf::st_crs(nodes_sampledata)$wkt <- gsub("°|°", "\\\u00b0", sf::st_crs(nodes_sampledata)$wkt)
sf::st_crs(nodes_sampledata)
load(file='C:/Users/rdn/Documents/Github/GISSB/data/nodes_sampledata.rda')
sf::st_crs(nodes_sampledata)$wkt <- gsub("°|°", "\\\u00b0", sf::st_crs(nodes_sampledata)$wkt)
nodes_sampledata
load(file='C:/Users/rdn/Documents/Github/GISSB/data/nodes_sampledata.rda')
nodes_sampledata
sf::st_crs(nodes_sampledata)
sf::st_crs(nodes_sampledata)$wkt <- gsub("°", "\\\u00b0", sf::st_crs(nodes_sampledata)$wkt)
stringi::stri_escape_unicode(°)
stringi::stri_escape_unicode("°")
stringi::stri_enc_toutf8("°")
load(file='C:/Users/rdn/Documents/Github/GISSB/data/nodes_sampledata.rda')
sf::st_crs(nodes_sampledata)$wkt <- gsub("°", "0", sf::st_crs(nodes_sampledata)$wkt)
save(nodes_sampledata, file = "C:/Users/rdn/Documents/Github/GISSB/data/nodes_sampledata.rda")
nodes_sampledata
sf::st_crs(nodes_sampledata)
load(file='C:/Users/rdn/Documents/Github/GISSB/data/nodes_sampledata.rda')
sf::st_crs(nodes_sampledata)$wkt <- gsub("°", "0", sf::st_crs(nodes_sampledata)$wkt)
save(nodes_sampledata, file = "C:/Users/rdn/Documents/Github/GISSB/data/nodes_sampledata.rda")
# rm(list = c("beregne_avstand_cpp"))
devtools::document()
devtools::check()
stringi::stri_enc_toascii("°")
load(file='C:/Users/rdn/Documents/Github/GISSB/data/nodes_sampledata.rda')
sf::st_crs(nodes_sampledata)$wkt <- gsub("°", "\032", sf::st_crs(nodes_sampledata)$wkt)
nodes_sampledata
sf::st_crs(nodes_sampledata)
save(nodes_sampledata, file = "C:/Users/rdn/Documents/Github/GISSB/data/nodes_sampledata.rda")
# rm(list = c("beregne_avstand_cpp"))
devtools::document()
devtools::check()
load(file='C:/Users/rdn/Documents/Github/GISSB/data/nodes_sampledata.rda')
nodes_sampledata
sf::st_crs(nodes_sampledata)
stringi::stri_enc_toascii("°|º")
stringi::stri_enc_toascii("\032")
load(file='C:/Users/rdn/Documents/Github/GISSB/data/nodes_sampledata.rda')
sf::st_crs(nodes_sampledata)
sf::st_crs(nodes_sampledata)$wkt <- gsub("°", "\\032", sf::st_crs(nodes_sampledata)$wkt)
sf::st_crs(nodes_sampledata)
load(file='C:/Users/rdn/Documents/Github/GISSB/data/nodes_sampledata.rda')
sf::st_crs(nodes_sampledata)
sf::st_crs(nodes_sampledata)$wkt <- gsub("°", "\\\032", sf::st_crs(nodes_sampledata)$wkt)
sf::st_crs(nodes_sampledata)
load(file='C:/Users/rdn/Documents/Github/GISSB/data/nodes_sampledata.rda')
sf::st_crs(nodes_sampledata)
load(file='C:/Users/rdn/Documents/Github/GISSB/data/nodes_sampledata.rda')
sf::st_crs(nodes_sampledata)
sf::st_crs(nodes_sampledata)$wkt <- gsub("°", stringi::stri_enc_toascii("°"), sf::st_crs(nodes_sampledata)$wkt)
sf::st_crs(nodes_sampledata)
save(nodes_sampledata, file = "C:/Users/rdn/Documents/Github/GISSB/data/nodes_sampledata.rda")
# rm(list = c("beregne_avstand_cpp"))
devtools::document()
devtools::check()
# rm(list = c("beregne_avstand_cpp"))
devtools::document()
devtools::check()
load(file='C:/Users/rdn/Documents/Github/GISSB/data/nodes_sampledata.rda')
sf::st_crs(nodes_sampledata)
sf::st_crs(nodes_sampledata)$wkt <- gsub("°", stringi::stri_enc_toascii("°"), sf::st_crs(nodes_sampledata)$wkt)
sf::st_crs(nodes_sampledata)
load(file='C:/Users/rdn/Documents/Github/GISSB/data/edges_sampledata.rda')
load(file='C:/Users/rdn/Documents/Github/GISSB/data/graph_cppRouting_meters_sampledata.rda')
load(file='C:/Users/rdn/Documents/Github/GISSB/data/graph_cppRouting_minutes_sampledata.rda')
load(file='C:/Users/rdn/Documents/Github/GISSB/data/graph_sampledata.rda')
load(file='C:/Users/rdn/Documents/Github/GISSB/data/vegnett_sampledata.rda')
usethis::use_data(nodes_sampledata, edges_sampledata, graph_cppRouting_meters_sampledata, graph_cppRouting_minutes_sampledata,
graph_sampledata, vegnett_sampledata, internal = TRUE, overwrite = TRUE)
# rm(list = c("beregne_avstand_cpp"))
devtools::document()
devtools::check()
load(file='C:/Users/rdn/Documents/Github/GISSB/data/nodes_sampledata.rda')
stringi::stri_enc_toascii(sf::st_crs(nodes_sampledata)$wkt)
sf::st_crs(nodes_sampledata)$wkt <- stringi::stri_enc_toascii(sf::st_crs(nodes_sampledata)$wkt)
# sf::st_crs(nodes_sampledata)
# sf::st_crs(nodes_sampledata)$wkt <- gsub("°", stringi::stri_enc_toascii("°"), sf::st_crs(nodes_sampledata)$wkt)
# sf::st_crs(nodes_sampledata)
save(nodes_sampledata, file = "C:/Users/rdn/Documents/Github/GISSB/data/nodes_sampledata.rda")
# rm(list = c("beregne_avstand_cpp"))
devtools::document()
devtools::check()
pkgdown::build_site()
devtools::check()
# rm(list = c("beregne_avstand_cpp"))
devtools::document()
Sys.setlocale("LC_CTYPE", "C")
pkgdown::build_site()
