matrix(ncol = 2)
colnames(to_coord) <- c("X", "Y")
node_index_d <- nabor::knn(data = coords_end,
query = to_coord,
k = 1)
nodes_end <- sf::st_transform(nodes_end, crs = 4326) %>%
coords_to_google() %>%
data.frame() %>%
dplyr::rename(to_node = nodeID,
coords_google_to_node = coords_google) %>%
dplyr::select(-geometry)
end_node <- nodes_end[node_index_d$nn.idx, ]
end_node$knn <- rep(1:knn, each=nrow(coords))
# ID <- coords$ID
ID <- coords %>%
dplyr::select(!!as.name(ID_col)) %>%
data.frame() %>%
select(-geometry)
dists <-  data.frame(ID, node_index_d$nn.dists)
# return(dists)
dists <- reshape2::melt(dists, id.vars = ID_col,
variable.name = "variabel",
value.name = "dist_coord_node_to") %>%
dplyr::select(-variabel)
end_node <- cbind(end_node, dists)
return(end_node)
}
}
from_node <- node_koord(koords = fra, fra_til = "from")
fra
from_node <- node_koord(koords = fra, direction = "from")
from_node <- node_koord(coords = fra, direction = "from")
from_node <- coords_to_node(coords = fra, direction = "from")
graph <- vegnett_list[[1]]
nodes <- vegnett_list[[2]]
edges <- vegnett_list[[3]]
graph_cppRouting_FT_MINUTES <- vegnett_list[[4]]
graph_cppRouting_LENGTH <- vegnett_list[[5]]
from_node <- coords_to_node(coords = fra, direction = "from")
#' Koordinater til Google Maps
#'
#' Funksjon for å omgjøre koordinater til et format som er enkelt å klippe og lime inn i Google Maps.
#'
#' @param coords sf-objekt med en geometrikolonne som skal omgjøres til CRS 4326
#' @param crs_out Ønsket koordinatsystem (CRS) for geometrikolonnen til sf-objektet som returneres
#' @returns sf-objekt med en ny kolonne lagt til (coords_google)
#' @export
#'
#' @examples
#' fra <- address_to_coord(postnummer = "0177",
#'                          adresse = "Akersveien 26") %>%
#'   coords_to_google()
#'
#' @encoding UTF-8
#'
#'
coords_to_google <- function(coords,
crs_out = 25833) {
# Forenkler koordinatene for å klippe og lime inn i Google Maps #
coords_4326 <- sf::st_transform(coords, crs = 4326) %>%
dplyr::mutate(coords_google_1 = gsub("^(.*?),.*", "\\1", as.character(geometry)),
coords_google_2 = gsub(".*,", "\\1", as.character(geometry))) %>%
dplyr::mutate(coords_google_1 = gsub("^c\\(|\\)$", "", as.character(coords_google_1)),
coords_google_2 = gsub(").*", "", coords_google_2)) %>%
dplyr::mutate(coords_google_1 = as.numeric(str_trim(coords_google_1)),
coords_google_2 = as.numeric(str_trim(coords_google_2))) %>%
dplyr::mutate(coords_google = paste0(coords_google_2, ", ", coords_google_1)) %>%
dplyr::select(-coords_google_1, -coords_google_2) %>%
sf::st_transform(coords, crs = crs_out)
# data.frame()
return(coords_4326)
}
fra <- address_to_coord(zip_code = "0177",
address = "Akersveien 26") %>%
coords_to_google()
View(fra)
til <- address_to_coord(zip_code = "2211",
address = "Otervegen 23") %>%
coords_to_google()
from_node <- coords_to_node(coords = fra, direction = "from")
View(from_node)
#' Beregne korteste kjøreavstand (igraph)
#'
#' Funksjon for å beregne korteste kjøreavstand (i minutter eller meter) mellom noder i vegnettet. Funksjonen kan også returnere nodelenken (path) som den korteste kjøreruten består av.
#' For å bruke funksjonen må vegnettet ha blitt lastet inn og omgjort til et tbl_graph-objekt som heter "graph". Dette gjøres med funksjonen `vegnett_to_R`.
#'
#' @param from_node_ID Numerisk verdi med node-ID (for en vektor med flere node-ID-er, se funksjonen `shortest_paths_cppRouting`).
#' @param to_node_ID Numerisk verdi med node-ID (for en vektor med flere node-ID-er, se funksjonen `shortest_paths_cppRouting`).
#' @param unit Karaktervektor med "FT_MINUTES" for å få korteste kjørerute målt i minutter eller "LENGTH" for korteste kjørerute målt i meter.
#' @param path Boolsk. Dersom path = TRUE returneres nodelenken som den korteste kjøreruten består av.
#'
#' @returns Vektor med korteste kjørerute i minutter eller meter. Dersom path = T returneres nodelenken som den korteste kjøreruten består av.
#' @export
#'
#' @examples
#' avstand_min <- shortest_path_igraph(from_node_ID = 26956,
#'                                to_node_ID = 210373,
#'                                unit = "FT_MINUTES")
#'
#' avstand_meter <- shortest_path_igraph(from_node_ID = 26956,
#'                                  to_node_ID = 210373,
#'                                  unit = "LENGTH")
#'
#' path <- shortest_path_igraph(from_node_ID = 26956,
#'                         to_node_ID = 210373,
#'                         unit = "FT_MINUTES",
#'                         path = T)
#' @encoding UTF-8
#'
#'
shortest_path_igraph <- function(from_node_ID,
to_node_ID,
unit = "FT_MINUTES",
path = F) {
path_graph <- igraph::shortest_paths(
graph = graph,
from = from_node,
to = to_node,
output = 'both',
weights = graph %>% tidygraph::activate(edges) %>% pull(!!as.name(unit))
)
path_graph_length <- graph %>%
igraph::subgraph.edges(eids = path_graph$epath %>%
unlist()) %>%
tidygraph::as_tbl_graph()
distance <- path_graph_length %>%
tidygraph::activate(edges) %>%
tibble::as_tibble() %>%
dplyr::summarise(length = sum(!!as.name(unit)))
if (path == T) {
return(path_graph)
} else {
return(distance)
}
}
avstand_min <- shortest_path_igraph(from_node_ID = from_node$from_node,
to_node_ID = to_node$to_node,
unit = "FT_MINUTES")
from_node <- coords_to_node(coords = from, direction = "from")
from <- address_to_coord(zip_code = "0177",
address = "Akersveien 26") %>%
coords_to_google()
to <- address_to_coord(zip_code = "2211",
address = "Otervegen 23") %>%
coords_to_google()
from_node <- coords_to_node(coords = from, direction = "from")
to_node <- coords_to_node(coords = to, direction = "to")
avstand_min <- shortest_path_igraph(from_node_ID = from_node$from_node,
to_node_ID = to_node$to_node,
unit = "FT_MINUTES")
#' Beregne korteste kjøreavstand (igraph)
#'
#' Funksjon for å beregne korteste kjøreavstand (i minutter eller meter) mellom noder i vegnettet. Funksjonen kan også returnere nodelenken (path) som den korteste kjøreruten består av.
#' For å bruke funksjonen må vegnettet ha blitt lastet inn og omgjort til et tbl_graph-objekt som heter "graph". Dette gjøres med funksjonen `vegnett_to_R`.
#'
#' @param from_node_ID Numerisk verdi med node-ID (for en vektor med flere node-ID-er, se funksjonen `shortest_paths_cppRouting`).
#' @param to_node_ID Numerisk verdi med node-ID (for en vektor med flere node-ID-er, se funksjonen `shortest_paths_cppRouting`).
#' @param unit Karaktervektor med "FT_MINUTES" for å få korteste kjørerute målt i minutter eller "LENGTH" for korteste kjørerute målt i meter.
#' @param path Boolsk. Dersom path = TRUE returneres nodelenken som den korteste kjøreruten består av.
#'
#' @returns Vektor med korteste kjørerute i minutter eller meter. Dersom path = T returneres nodelenken som den korteste kjøreruten består av.
#' @export
#'
#' @examples
#' avstand_min <- shortest_path_igraph(from_node_ID = 26956,
#'                                to_node_ID = 210373,
#'                                unit = "FT_MINUTES")
#'
#' avstand_meter <- shortest_path_igraph(from_node_ID = 26956,
#'                                  to_node_ID = 210373,
#'                                  unit = "LENGTH")
#'
#' path <- shortest_path_igraph(from_node_ID = 26956,
#'                         to_node_ID = 210373,
#'                         unit = "FT_MINUTES",
#'                         path = T)
#' @encoding UTF-8
#'
#'
shortest_path_igraph <- function(from_node_ID,
to_node_ID,
unit = "FT_MINUTES",
path = F) {
path_graph <- igraph::shortest_paths(
graph = graph,
from = from_node_ID,
to = to_node_ID,
output = 'both',
weights = graph %>% tidygraph::activate(edges) %>% pull(!!as.name(unit))
)
path_graph_length <- graph %>%
igraph::subgraph.edges(eids = path_graph$epath %>%
unlist()) %>%
tidygraph::as_tbl_graph()
distance <- path_graph_length %>%
tidygraph::activate(edges) %>%
tibble::as_tibble() %>%
dplyr::summarise(length = sum(!!as.name(unit)))
if (path == T) {
return(path_graph)
} else {
return(distance)
}
}
avstand_min <- shortest_path_igraph(from_node_ID = from_node$from_node,
to_node_ID = to_node$to_node,
unit = "FT_MINUTES")
avstand_min
avstand_meter <- shortest_path_igraph(from_node_ID = from_node$from_node,
to_node_ID = to_node$to_node,
unit = "LENGTH")
avstand_meter
#' Visualiser kjørerute med Leaflet
#'
#' Funksjonen path_leaflet visualiserer den korteste kjøreruten (i minutter eller meter) som har blitt beregnet med funksjonen beregne_avstand (der path = TRUE).
#' For å få lastet inn bakgrunnskart fra Leaflet kreves nettilgang.
#'
#' @param path Objekt (list) som har blitt laget med funksjonen beregne_avstand (der path = TRUE).
#'
#' @returns Interaktivt kart Leaflet som viser kjøreruten mellom et valgt fra- og tilpunkt på vegnettet.
#' @export
#'
#' @examples
#' path_leaflet(path)
#' @encoding UTF-8
#'
#'
path_leaflet <- function(path) {
path_graph_length <- graph %>%
igraph::subgraph.edges(eids = path$epath %>%
unlist()) %>%
tidygraph::as_tbl_graph()
leaflet_out <- path_graph_length %>%
tidygraph::activate(edges) %>%
tibble::as_tibble() %>%
sf::st_as_sf() %>%
sf::st_transform(4326) %>%
leaflet::leaflet() %>%
leaflet::addPolylines() %>%
leaflet::addTiles()
return(leaflet_out)
}
path <- shortest_path_igraph(from_node_ID = from_node$from_node,
to_node_ID = to_node$to_node,
unit = "FT_MINUTES",
path = T)
# OBS: mangler dokumentasjon!
path_leaflet
# OBS: ligger heller ikke i NAMESPACE
GISSB::path_leaflet(path)
#' Beregne korteste kjøreavstand (cppRouting)
#'
#' Funksjon for å beregne korteste kjøreavstand (i minutter eller meter) mellom to eller flere noder i vegnettet. Fungerer også med vektorer med flere adresser for start_node og/eller to_node.
#' For å bruke funksjonen må vegnettet ha blitt lastet inn og omgjort til et cppRouting-objekt som heter "graph_cppRouting_FT_MINUTES" eller "graph_cppRouting_LENGTH". Dette gjøres med funksjonen vegnett_to_R.
#'
#' @param from_node_ID Numerisk vektor med én eller flere node-ID-er.
#' @param to_node_ID Numerisk vektor med én eller flere node-ID-er.
#' @param unit Karaktervektor med "FT_MINUTES" for å få korteste kjørerute målt i minutter eller "LENGTH" for korteste kjørerute målt i meter.
#' @param dist Karaktervektor som angir om man ønsker alle kjørerutene per from_node. Dersom man kun ønsker det korteste kjøreruten per from_node angir man dist = "min". "max" angir den lengste kjøreruten per from_node.
#'
#' @returns Objekt (data.frame) med hvor mange minutter eller meter kjøreavstand det er mellom de angitte fra- og tilpunktene.
#' @export
#'
#' @examples
#' avstand_cpp_min <- shortest_paths_cppRouting(26956,
#'                                        210373,
#'                                        unit = "FT_MINUTES")
#'
#' avstand_cpp_meter <- shortest_paths_cppRouting(26956,
#'                                          210373,
#'                                          unit = "LENGTH")
#' @encoding UTF-8
#'
#'
shortest_paths_cppRouting <- function(from_node_ID,
to_node_ID,
unit = "FT_MINUTES",
dist = "all") {
if (unit == "FT_MINUTES") {
graph_cppRouting <- graph_cppRouting_FT_MINUTES
}
if (unit == "LENGTH") {
graph_cppRouting <- graph_cppRouting_LENGTH
}
dists <- cppRouting::get_distance_matrix(graph_cppRouting,
from = from_node_ID,
to = to_node_ID,
algorithm = "phast")
dists2 <- data.frame(dists)
dists2 <- tibble::rownames_to_column(dists2, "from_node")
dists2_long <- reshape2::melt(dists2, id.vars = "from_node",
variable.name = "to_node",
value.name = "length")
dists2_long$to_node <- gsub("X", "", dists2_long$to_node)
if (dist == "min") {
# Beholder kun den nærmeste fødeavdelingen #
dists2_long <- dists2_long %>%
dplyr::group_by(from_node) %>%
# dplyr::slice(which.min(minutter)) %>%
dplyr::slice(which.min(length)) # %>% #OBS?
# dplyr::right_join(from_node, by = c("from_node"))
}
if (dist == "max") {
# Beholder kun fødeavdelingen som er lengst unna #
dists2_long <- dists2_long %>%
dplyr::group_by(from_node) %>%
# dplyr::slice(which.min(minutter)) %>%
dplyr::slice(which.max(length)) # %>% #OBS?
# dplyr::right_join(from_node, by = c("from_node"))
}
dists2_long$from_node <- as.integer(dists2_long$from_node)
dists2_long$to_node <- as.integer(dists2_long$to_node)
return(dists2_long)
}
avstand_cpp_min <- shortest_paths_cppRouting(26956,
210373,
unit = "FT_MINUTES")
avstand_cpp_min
avstand_cpp_meter <- shortest_paths_cppRouting(26956,
210373,
unit = "LENGTH")
avstand_cpp_meter
address = c("Akersveien 26", "Trondheimsveien 99") %>%
from <- address_to_coord(zip_code = "0177",
address = "Akersveien 26") %>%
coords_to_google()
from <- address_to_coord(zip_code = "0177",
address = "Akersveien 26") %>%
coords_to_google()
to <- address_to_coord(zip_code = c("2211", "0565"),
to_node <- coords_to_node(coords = to, direction = "to")
to_node
to_node <- coords_to_node(coords = to, direction = "to")
avstand_cpp_min <- shortest_paths_cppRouting(from_node$from_node,
to_node$to_node,
unit = "FT_MINUTES")
avstand_cpp_min
from_node$from_node
to_node$to_node
to
to <- address_to_coord(zip_code = c("2211", "0565"),
to <- address_to_coord(zip_code = c("2211", "0565"),
address = c("Otervegen 23", "Trondheimsveien 99")) %>%
coords_to_google()
to <- address_to_coord(zip_code = c("2211", "0565"),
to <- address_to_coord(zip_code = c("2211", "0565"),
address = c("Otervegen 23", "Trondheimsveien 99")) %>%
coords_to_google()
to_node <- coords_to_node(coords = to, direction = "to")
avstand_cpp_min <- shortest_paths_cppRouting(from_node$from_node,
to_node$to_node,
unit = "FT_MINUTES")
avstand_cpp_min
avstand_cpp_min <- shortest_paths_cppRouting(from_node$from_node,
to_node$to_node,
unit = "FT_MINUTES",
dist = "min")
avstand_cpp_min
resultater <- left_join(avstand_cpp_min, from_node, by = "from_node")
resultater
resultater <- left_join(resultater, to_node, by = "to_node")
resultater
View(resultater)
to_node
to
to_node
from <- address_to_coord(zip_code = "0177",
address = "Akersveien 26") %>%
coords_to_google()
to <- address_to_coord(zip_code = c("2211", "0565"),
address = c("Otervegen 23", "Trondheimsveien 99")) %>%
coords_to_google()
from
from_node <- coords_to_node(coords = from, direction = "from")
to_node <- coords_to_node(coords = to, direction = "to")
from_node
from <- address_to_coord(zip_code = "0177",
address = "Akersveien 26") %>%
coords_to_google() %>%
dplyr::rename(ID_from = ID)
to <- address_to_coord(zip_code = c("2211", "0565"),
address = c("Otervegen 23", "Trondheimsveien 99")) %>%
coords_to_google() %>%
dplyr::rename(ID_to = ID)
from_node <- coords_to_node(coords = from, direction = "from", ID_col = "ID_from")
to_node <- coords_to_node(coords = to, direction = "to", ID_col = "ID_to")
avstand_cpp_min <- shortest_paths_cppRouting(from_node$from_node,
to_node$to_node,
unit = "FT_MINUTES",
dist = "min")
avstand_cpp_min
from_node
from_node <- coords_to_node(coords = from, direction = "from", ID_col = "ID_from") %>%
select(-membership, -knn)
to_node <- coords_to_node(coords = to, direction = "to", ID_col = "ID_to") %>%
select(-membership, -knn)
resultater <- left_join(avstand_cpp_min, from_node, by = "from_node")
resultater <- left_join(resultater, to_node, by = "to_node")
View(resultater)
from
to
from
from
from_node
from_info <- rbind(from, from_node)
from
from_node
from
avstand_cpp_min
from_node
resultater <- left_join(avstand_cpp_min, from_node, by = "from_node")
resultater <- left_join(resultater, to_node, by = "to_node")
View(resultater)
avstand_cpp_min <- shortest_paths_cppRouting(from_node$from_node,
to_node$to_node,
unit = "FT_MINUTES",
dist = "all")
resultater <- left_join(avstand_cpp_min, from_node, by = "from_node")
resultater <- left_join(resultater, to_node, by = "to_node")
View(resultater)
#' Beregne korteste kjøreavstand (cppRouting)
#'
#' Funksjon for å beregne korteste kjøreavstand (i minutter eller meter) mellom to eller flere noder i vegnettet. Fungerer også med vektorer med flere adresser for start_node og/eller to_node.
#' For å bruke funksjonen må vegnettet ha blitt lastet inn og omgjort til et cppRouting-objekt som heter "graph_cppRouting_FT_MINUTES" eller "graph_cppRouting_LENGTH". Dette gjøres med funksjonen vegnett_to_R.
#'
#' @param from_node_ID Numerisk vektor med én eller flere node-ID-er.
#' @param to_node_ID Numerisk vektor med én eller flere node-ID-er.
#' @param unit Karaktervektor med "FT_MINUTES" for å få korteste kjørerute målt i minutter eller "LENGTH" for korteste kjørerute målt i meter.
#' @param dist Karaktervektor som angir om man ønsker alle kjørerutene per from_node. Dersom man kun ønsker det korteste kjøreruten per from_node angir man dist = "min". "max" angir den lengste kjøreruten per from_node.
#'
#' @returns Objekt (data.frame) med hvor mange minutter eller meter kjøreavstand det er mellom de angitte fra- og tilpunktene.
#' @export
#'
#' @examples
#' avstand_cpp_min <- shortest_path_cppRouting(26956,
#'                                        210373,
#'                                        unit = "FT_MINUTES")
#'
#' avstand_cpp_meter <- shortest_path_cppRouting(26956,
#'                                          210373,
#'                                          unit = "LENGTH")
#' @encoding UTF-8
#'
#'
shortest_path_cppRouting <- function(from_node_ID,
to_node_ID,
unit = "FT_MINUTES",
dist = "all") {
if (unit == "FT_MINUTES") {
graph_cppRouting <- graph_cppRouting_FT_MINUTES
}
if (unit == "LENGTH") {
graph_cppRouting <- graph_cppRouting_LENGTH
}
dists <- cppRouting::get_distance_matrix(graph_cppRouting,
from = from_node_ID,
to = to_node_ID,
algorithm = "phast")
dists2 <- data.frame(dists)
dists2 <- tibble::rownames_to_column(dists2, "from_node")
dists2_long <- reshape2::melt(dists2, id.vars = "from_node",
variable.name = "to_node",
value.name = "length")
dists2_long$to_node <- gsub("X", "", dists2_long$to_node)
if (dist == "min") {
# Beholder kun den nærmeste fødeavdelingen #
dists2_long <- dists2_long %>%
dplyr::group_by(from_node) %>%
# dplyr::slice(which.min(minutter)) %>%
dplyr::slice(which.min(length)) # %>% #OBS?
# dplyr::right_join(from_node, by = c("from_node"))
}
if (dist == "max") {
# Beholder kun fødeavdelingen som er lengst unna #
dists2_long <- dists2_long %>%
dplyr::group_by(from_node) %>%
# dplyr::slice(which.min(minutter)) %>%
dplyr::slice(which.max(length)) # %>% #OBS?
# dplyr::right_join(from_node, by = c("from_node"))
}
dists2_long$from_node <- as.integer(dists2_long$from_node)
dists2_long$to_node <- as.integer(dists2_long$to_node)
return(dists2_long)
}
avstand_cpp_min <- shortest_path_cppRouting(from_node$from_node,
to_node$to_node,
unit = "FT_MINUTES",
dist = "all")
avstand_cpp_min
avstand_cpp_min <- shortest_path_cppRouting(from_node$from_node,
to_node$to_node,
unit = "FT_MINUTES",
dist = "min")
resultater <- left_join(avstand_cpp_min, from_node, by = "from_node")
resultater <- left_join(resultater, to_node, by = "to_node")
resultater
usethis::use_pipe()
# rm(list = c("beregne_avstand_cpp"))
devtools::document()
rm(list = c("path_leaflet"))
# rm(list = c("beregne_avstand_cpp"))
devtools::document()
# rm(list = c("beregne_avstand_cpp"))
devtools::document()
# Lager vignette
# usethis::use_vignette("GISSB_vignette")
usethis::use_pkgdown() # OBS: docs legges i .gitignore (må fjernes)
pkgdown::build_site()
# Lager vignette
# usethis::use_vignette("GISSB_vignette")
usethis::use_pkgdown() # OBS: docs legges i .gitignore (må fjernes)
pkgdown::build_site()
